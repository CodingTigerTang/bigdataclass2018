[
["index.html", "Big Data with R - Exercise book", " Big Data with R - Exercise book Learn how to use R with Hive, SQL Server, Oracle and other scalable external data sources along with Big Data clusters in this two-day workshop. We will cover how to connect, retrieve schema information, upload data, and explore data outside of R. For databases, we will focus on the dplyr, DBI and odbc packages. These packages enable us to use the same dplyr verbs inside R but are translated and sent as SQL queries. For Big Data clusters, we will also learn how to use the sparklyr package to run models inside Spark and return the results to R. We will review recommendations for connection settings, security best practices and deployment options. Throughout the workshop, we will take advantage of the new data connections available with the RStudio IDE. "],
["access-a-database.html", "1 Access a database 1.1 Connect to a database 1.2 Explore the database using the RStudio IDE 1.3 List drivers and DSNs 1.4 Connect to a database using code 1.5 Connect to a database without a DSN 1.6 Secure credentials in a file 1.7 Use the OS credential store", " 1 Access a database 1.1 Connect to a database The simpliest way to connect to a database. More complex examples will be examined later in the class. Click on the Connections tab Click on the New Connection button Select Postgres Dev Click OK 1.2 Explore the database using the RStudio IDE Becoming familiar with the new interface for databases inside the RStudio IDE Expand the datawarehouse schema Expand the airport table Click on the table icon to the right of the airport table (Optional) Expand and explore the other tables Click on the disconnect icon to close the connection 1.3 List drivers and DSNs Learn how to use the odbc package to get DB info from your machine To get a list of drivers available in the server library(odbc) odbcListDrivers()[1:2] ## name attribute ## 1 PostgreSQL ANSI Description ## 2 PostgreSQL ANSI Driver ## 3 PostgreSQL ANSI Setup ## 4 PostgreSQL ANSI Debug ## 5 PostgreSQL ANSI CommLog ## 6 PostgreSQL ANSI UsageCount ## 7 PostgreSQL Unicode Description ## 8 PostgreSQL Unicode Driver ## 9 PostgreSQL Unicode Setup ## 10 PostgreSQL Unicode Debug ## 11 PostgreSQL Unicode CommLog ## 12 PostgreSQL Unicode UsageCount ## 13 AmazonRedshift Driver ## 14 Hive Driver ## 15 Impala Driver ## 16 Oracle Driver ## 17 PostgreSQL Driver ## 18 Salesforce Driver ## 19 SQLServer Driver ## 20 Teradata Driver To see a list of DSNs available in the server odbcListDataSources() ## name description ## 1 Postgres Dev PostgreSQL ## 2 Postgres Prod PostgreSQL 1.4 Connect to a database using code Use the odbc package along with DBI to open a connection to a database Run the following code to connect library(DBI) con &lt;- dbConnect(odbc::odbc(), &quot;Postgres Dev&quot;) Use dbListTables() to retrieve a list of tables dbListTables(con) ## [1] &quot;airport&quot; &quot;carrier&quot; &quot;flight&quot; &quot;vflight&quot; Use dbGetQuery() to run a quick query odbc::dbGetQuery(con, &quot;SELECT * FROM datawarehouse.airport LIMIT 10&quot;) ## airport airportname city state country ## 1 ABE Lehigh Valley International Allentown PA USA ## 2 ABI Abilene Regional Abilene TX USA ## 3 ABQ Albuquerque International Albuquerque NM USA ## 4 ABY Southwest Georgia Regional Albany GA USA ## 5 ACK Nantucket Memorial Nantucket MA USA ## 6 ACT Waco Regional Waco TX USA ## 7 ACV Arcata Arcata/Eureka CA USA ## 8 ACY Atlantic City International Atlantic City NJ USA ## 9 ADK Adak Adak AK USA ## 10 ADQ Kodiak Kodiak AK USA ## lat long ## 1 40.65236 -75.44040 ## 2 32.41132 -99.68190 ## 3 35.04022 -106.60919 ## 4 31.53552 -84.19447 ## 5 41.25305 -70.06018 ## 6 31.61129 -97.23052 ## 7 40.97812 -124.10862 ## 8 39.45758 -74.57717 ## 9 51.87796 -176.64603 ## 10 57.74997 -152.49386 Disconnect from the database using dbDisconnect() dbDisconnect(con) 1.5 Connect to a database without a DSN A more complex way of connecting to a database, using best practices: http://db.rstudio.com/best-practices/managing-credentials/#prompt-for-credentials Use the following code to start a new connection that does not use the pre-defined DSN con &lt;- dbConnect( odbc::odbc(), Driver = &quot;PostgreSQL&quot;, Server = &quot;localhost&quot;, UID = rstudioapi::askForPassword(&quot;Database user&quot;), PWD = rstudioapi::askForPassword(&quot;Database password&quot;), Port = 5432, Database = &quot;postgres&quot; ) When prompted, type in rstudio_dev for the user, and dev_user as the password 1.6 Secure credentials in a file *Credentials can be saved in a YAML file and then read using the config package: http://db.rstudio.com/best-practices/managing-credentials/#stored-in-a-file-with-config* Open and explore the config.yml file available in your working directory Use the config package to connect to the database dw &lt;- config::get(&quot;datawarehouse-dev&quot;) con &lt;- DBI::dbConnect(odbc::odbc(), Driver = dw$driver, Server = dw$server, UID = dw$uid, PWD = dw$pwd, Port = dw$port, Database = dw$database ) 1.7 Use the OS credential store The keyring package can be used to store the database credentials at the OS level [Pending] "],
["dplyr-basics.html", "2 dplyr Basics 2.1 Create a table variable 2.2 Basic aggregation 2.3 Under the hood 2.4 Un-translated R commands", " 2 dplyr Basics 2.1 Create a table variable Basics to how to point a variable in R to a table or view inside the database Load the dplyr and dbplyr libraries library(dplyr) library(dbplyr) (Optional) Open a connection to the database if it’s currently closed con &lt;- DBI::dbConnect(odbc::odbc(), &quot;Postgres Dev&quot;) Use the tbl() and in_schema() functions to create a reference to a table tbl(con, in_schema(&quot;datawarehouse&quot;, &quot;airport&quot;)) ## # Source: table&lt;datawarehouse.airport&gt; [?? x 7] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## airport airportname city state count… lat long ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ABE Lehigh Valley International Allentown PA USA 40.7 - 75.4 ## 2 ABI Abilene Regional Abilene TX USA 32.4 - 99.7 ## 3 ABQ Albuquerque International Albuquer… NM USA 35.0 -107 ## 4 ABY Southwest Georgia Regional Albany GA USA 31.5 - 84.2 ## 5 ACK Nantucket Memorial Nantucket MA USA 41.3 - 70.1 ## 6 ACT Waco Regional Waco TX USA 31.6 - 97.2 ## 7 ACV Arcata Arcata/E… CA USA 41.0 -124 ## 8 ACY Atlantic City International Atlantic… NJ USA 39.5 - 74.6 ## 9 ADK Adak Adak AK USA 51.9 -177 ## 10 ADQ Kodiak Kodiak AK USA 57.7 -152 ## # ... with more rows Load the reference, not the table data, into a variable airports &lt;- tbl(con, in_schema(&quot;datawarehouse&quot;, &quot;airport&quot;)) Call the variable to see preview the data in the table airports ## # Source: table&lt;datawarehouse.airport&gt; [?? x 7] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## airport airportname city state count… lat long ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ABE Lehigh Valley International Allentown PA USA 40.7 - 75.4 ## 2 ABI Abilene Regional Abilene TX USA 32.4 - 99.7 ## 3 ABQ Albuquerque International Albuquer… NM USA 35.0 -107 ## 4 ABY Southwest Georgia Regional Albany GA USA 31.5 - 84.2 ## 5 ACK Nantucket Memorial Nantucket MA USA 41.3 - 70.1 ## 6 ACT Waco Regional Waco TX USA 31.6 - 97.2 ## 7 ACV Arcata Arcata/E… CA USA 41.0 -124 ## 8 ACY Atlantic City International Atlantic… NJ USA 39.5 - 74.6 ## 9 ADK Adak Adak AK USA 51.9 -177 ## 10 ADQ Kodiak Kodiak AK USA 57.7 -152 ## # ... with more rows Set up the pointers to the other of the tables flights &lt;- tbl(con, in_schema(&quot;datawarehouse&quot;, &quot;flight&quot;)) carriers &lt;- tbl(con, in_schema(&quot;datawarehouse&quot;, &quot;carrier&quot;)) 2.2 Basic aggregation A couple of dplyr commands that run in-database How many records are in the airport table? tbl(con, in_schema(&quot;datawarehouse&quot;, &quot;vflight&quot;)) %&gt;% group_by(month) %&gt;% summarise(n()) ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## month `n()` ## &lt;dbl&gt; &lt;S3: integer64&gt; ## 1 10.0 556205 ## 2 4.00 598126 ## 3 12.0 544958 ## 4 5.00 606293 ## 5 2.00 569236 ## 6 7.00 627931 ## 7 11.0 523272 ## 8 9.00 540908 ## 9 1.00 605765 ## 10 3.00 616090 ## # ... with more rows What is the average character length of the airport codes? How many characters is the longest and the shortest airport name? airports %&gt;% summarise(avg_airport_length = mean(length(airport)), max_airport_name = max(length(airportname)), min_airport_name = min(length(airportname)), total_records = n()) ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `MAX(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `MIN(x, na.rm = TRUE)` to silence this warning ## # Source: lazy query [?? x 4] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## avg_airport_length max_airport_name min_airport_name total_records ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;S3: integer64&gt; ## 1 3.00 40 3 305 Additional exercises: How many records are in the carrier table? How many characters is the longest carriername? 2.3 Under the hood Use show_query() to preview the SQL statement that will be sent to the database* SQL statement that actually runs when we ran airports as a command show_query(airports) ## &lt;SQL&gt; ## SELECT * ## FROM datawarehouse.airport Easily view the resulting query by adding show_query() in another piped command carriers %&gt;% summarise(n()) ## # Source: lazy query [?? x 1] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## `n()` ## &lt;S3: integer64&gt; ## 1 20 Run the same for last exercise in the previous section airports %&gt;% summarise(avg_airport_length = mean(length(airport)), max_airport_name = max(length(airportname)), min_airport_name = min(length(airportname)), total_records = n()) %&gt;% show_query() ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `MAX(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `MIN(x, na.rm = TRUE)` to silence this warning ## &lt;SQL&gt; ## SELECT AVG(LENGTH(&quot;airport&quot;)) AS &quot;avg_airport_length&quot;, MAX(LENGTH(&quot;airportname&quot;)) AS &quot;max_airport_name&quot;, MIN(LENGTH(&quot;airportname&quot;)) AS &quot;min_airport_name&quot;, COUNT(*) AS &quot;total_records&quot; ## FROM datawarehouse.airport 2.4 Un-translated R commands Review of how dbplyr handles R commands that have not been translated into a like-SQL command Preview how Sys.time() is translated airports %&gt;% mutate(today = Sys.time()) %&gt;% show_query() ## &lt;SQL&gt; ## SELECT &quot;airport&quot;, &quot;airportname&quot;, &quot;city&quot;, &quot;state&quot;, &quot;country&quot;, &quot;lat&quot;, &quot;long&quot;, SYS.TIME() AS &quot;today&quot; ## FROM datawarehouse.airport Use PostgreSQL’s native commands, in this case now() airports %&gt;% mutate(today = now()) %&gt;% show_query() ## &lt;SQL&gt; ## SELECT &quot;airport&quot;, &quot;airportname&quot;, &quot;city&quot;, &quot;state&quot;, &quot;country&quot;, &quot;lat&quot;, &quot;long&quot;, NOW() AS &quot;today&quot; ## FROM datawarehouse.airport Run the dplyr code to confirm it works airports %&gt;% mutate(today = now()) %&gt;% select(today) %&gt;% head() ## # Source: lazy query [?? x 1] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## today ## &lt;dttm&gt; ## 1 2018-01-10 21:36:40 ## 2 2018-01-10 21:36:40 ## 3 2018-01-10 21:36:40 ## 4 2018-01-10 21:36:40 ## 5 2018-01-10 21:36:40 ## 6 2018-01-10 21:36:40 "],
["data-transformation.html", "3 Data transformation 3.1 Group and sort records 3.2 Answering questions with dplyr 3.3 Aggregate mulitple columns 3.4 View record level data", " 3 Data transformation 3.1 Group and sort records Learn how to use group_by() and arrange() to better understand aggregated data How many flights are there per month? flights %&gt;% group_by(month) %&gt;% tally() ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## month n ## &lt;dbl&gt; &lt;S3: integer64&gt; ## 1 10.0 556205 ## 2 4.00 598126 ## 3 12.0 544958 ## 4 5.00 606293 ## 5 2.00 569236 ## 6 7.00 627931 ## 7 11.0 523272 ## 8 9.00 540908 ## 9 1.00 605765 ## 10 3.00 616090 ## # ... with more rows Order the results by the month number flights %&gt;% group_by(month) %&gt;% tally() %&gt;% arrange(month) ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## # Ordered by: month ## month n ## &lt;dbl&gt; &lt;S3: integer64&gt; ## 1 1.00 605765 ## 2 2.00 569236 ## 3 3.00 616090 ## 4 4.00 598126 ## 5 5.00 606293 ## 6 6.00 608665 ## 7 7.00 627931 ## 8 8.00 612279 ## 9 9.00 540908 ## 10 10.0 556205 ## # ... with more rows Order the results by the number of flights, starting with the month with most flights by using desc() inside the arrange() command flights %&gt;% group_by(month) %&gt;% tally() %&gt;% arrange(desc(n)) ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## # Ordered by: desc(n) ## month n ## &lt;dbl&gt; &lt;S3: integer64&gt; ## 1 7.00 627931 ## 2 3.00 616090 ## 3 8.00 612279 ## 4 6.00 608665 ## 5 5.00 606293 ## 6 1.00 605765 ## 7 4.00 598126 ## 8 2.00 569236 ## 9 10.0 556205 ## 10 12.0 544958 ## # ... with more rows 3.2 Answering questions with dplyr Quick review of how to translate questions into dplyr code Which are the top 4 months with the most flight activity? flights %&gt;% group_by(month) %&gt;% tally() %&gt;% arrange(desc(n)) %&gt;% head(4) ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## # Ordered by: desc(n) ## month n ## &lt;dbl&gt; &lt;S3: integer64&gt; ## 1 7.00 627931 ## 2 3.00 616090 ## 3 8.00 612279 ## 4 6.00 608665 What were the top 5 calendar days with most flight activity? flights %&gt;% group_by(month, dayofmonth) %&gt;% tally() %&gt;% arrange(desc(n)) %&gt;% head(5) ## # Source: lazy query [?? x 3] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## # Groups: month ## # Ordered by: desc(n) ## month dayofmonth n ## &lt;dbl&gt; &lt;dbl&gt; &lt;S3: integer64&gt; ## 1 7.00 18.0 21128 ## 2 7.00 11.0 21125 ## 3 7.00 25.0 21102 ## 4 7.00 10.0 21058 ## 5 7.00 17.0 21055 Which are the top 5 carriers (airlines) with the most flights? flights %&gt;% group_by(uniquecarrier) %&gt;% tally() %&gt;% arrange(desc(n)) %&gt;% head(5) ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## # Ordered by: desc(n) ## uniquecarrier n ## &lt;chr&gt; &lt;S3: integer64&gt; ## 1 WN 1201754 ## 2 AA 604885 ## 3 OO 567159 ## 4 MQ 490693 ## 5 US 453589 Figure the percent ratio of flights per month flights %&gt;% group_by(month) %&gt;% tally() %&gt;% arrange(desc(n)) %&gt;% mutate(percent = n/sum(n)) ## Warning: Missing values are always removed in SQL. ## Use `sum(x, na.rm = TRUE)` to silence this warning ## # Source: lazy query [?? x 3] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## # Ordered by: desc(n) ## month n percent ## &lt;dbl&gt; &lt;S3: integer64&gt; &lt;dbl&gt; ## 1 7.00 627931 0.0896 ## 2 3.00 616090 0.0879 ## 3 8.00 612279 0.0873 ## 4 6.00 608665 0.0868 ## 5 5.00 606293 0.0865 ## 6 1.00 605765 0.0864 ## 7 4.00 598126 0.0853 ## 8 2.00 569236 0.0812 ## 9 10.0 556205 0.0793 ## 10 12.0 544958 0.0777 ## # ... with more rows 3.3 Aggregate mulitple columns Practice using summarise _ functions Use summarise_all() to send the same function to all fields flights %&gt;% select(depdelay, arrdelay) %&gt;% summarise_all(mean) ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## depdelay arrdelay ## &lt;dbl&gt; &lt;dbl&gt; ## 1 9.78 7.99 Use summarise_at() to pre-select the fields that will receive the function flights %&gt;% summarise_at(c(&quot;depdelay&quot;, &quot;arrdelay&quot;),mean) ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## depdelay arrdelay ## &lt;dbl&gt; &lt;dbl&gt; ## 1 9.78 7.99 Use summarise_if() to summarize only if the field meets a criterion flights %&gt;% summarise_if(is.numeric,mean) ## Applying predicate on the first 100 rows ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## # Source: lazy query [?? x 24] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## year month dayof… dayo… dept… crsd… arrt… crsa… flig… actu… crse… airt… ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2008 6.38 15.7 3.92 1308 1326 1449 1495 2224 125 129 102 ## # ... with 12 more variables: arrdelay &lt;dbl&gt;, depdelay &lt;dbl&gt;, ## # distance &lt;dbl&gt;, taxiin &lt;dbl&gt;, taxiout &lt;dbl&gt;, cancelled &lt;dbl&gt;, ## # diverted &lt;dbl&gt;, carrierdelay &lt;dbl&gt;, weatherdelay &lt;dbl&gt;, ## # nasdelay &lt;dbl&gt;, securitydelay &lt;dbl&gt;, lateaircraftdelay &lt;dbl&gt; Combine with group_by() to create more complex results flights %&gt;% select(month, depdelay, arrdelay) %&gt;% group_by(month) %&gt;% summarise_all(mean) ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## Warning: Missing values are always removed in SQL. ## Use `AVG(x, na.rm = TRUE)` to silence this warning ## # Source: lazy query [?? x 3] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## month depdelay arrdelay ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 10.0 3.78 0.412 ## 2 4.00 8.06 6.68 ## 3 12.0 16.8 16.1 ## 4 5.00 7.56 5.91 ## 5 2.00 13.2 12.6 ## 6 7.00 11.6 9.78 ## 7 11.0 5.38 2.00 ## 8 9.00 3.89 0.684 ## 9 1.00 11.1 9.88 ## 10 3.00 12.2 10.9 ## # ... with more rows 3.4 View record level data Important tips to record preview data How many flights in July 18th were one or more hours late? flights %&gt;% filter(depdelay &gt;= 60, month == 7, dayofmonth == 18) %&gt;% tally() ## # Source: lazy query [?? x 1] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## n ## &lt;S3: integer64&gt; ## 1 1239 Use filter() to retreive only the needed data, and head() to limit the preview even further. flights %&gt;% filter(depdelay &gt;= 60, month == 7, dayofmonth == 18) %&gt;% head(100) ## # Source: lazy query [?? x 29] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## year month dayof… dayof… depti… crsde… arrti… crsa… uniq… fligh… tail… ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 2008 7.00 18.0 5.00 2201 2030 2.18e² 2359 DL 9.00 N375… ## 2 2008 7.00 18.0 5.00 1702 1600 1.93e³ 1900 DL 16.0 N649… ## 3 2008 7.00 18.0 5.00 945 820 1.22e³ 1055 DL 17.0 N935… ## 4 2008 7.00 18.0 5.00 1837 1630 2.11e³ 1811 DL 31.0 N946… ## 5 2008 7.00 18.0 5.00 1812 1645 2.15e³ 2033 DL 151 N655… ## 6 2008 7.00 18.0 5.00 1335 800 1.93e³ 1354 DL 166 N3756 ## 7 2008 7.00 18.0 5.00 2151 2050 2.31e³ 2203 DL 179 N129… ## 8 2008 7.00 18.0 5.00 2058 1945 1.00e⁰ 2320 DL 201 N3756 ## 9 2008 7.00 18.0 5.00 1337 1005 2.10e³ 1739 DL 211 N674… ## 10 2008 7.00 18.0 5.00 1759 1620 2.10e³ 1856 DL 637 N373… ## # ... with more rows, and 18 more variables: actualelapsedtime &lt;dbl&gt;, ## # crselapsedtime &lt;dbl&gt;, airtime &lt;dbl&gt;, arrdelay &lt;dbl&gt;, depdelay &lt;dbl&gt;, ## # origin &lt;chr&gt;, dest &lt;chr&gt;, distance &lt;dbl&gt;, taxiin &lt;dbl&gt;, taxiout &lt;dbl&gt;, ## # cancelled &lt;dbl&gt;, cancellationcode &lt;chr&gt;, diverted &lt;dbl&gt;, ## # carrierdelay &lt;dbl&gt;, weatherdelay &lt;dbl&gt;, nasdelay &lt;dbl&gt;, ## # securitydelay &lt;dbl&gt;, lateaircraftdelay &lt;dbl&gt; Use collect() and View() to preview the data in the IDE. Make sure to always limit the number of returned rows. flights %&gt;% filter(depdelay &gt;= 60, month == 7, dayofmonth == 18) %&gt;% collect() %&gt;% head(100) %&gt;% View(&quot;my_preview&quot;) "],
["intro-to-dashboards.html", "4 Intro to dashboards 4.1 Basic structure 4.2 Dropdown data 4.3 Update dashboard items 4.4 Integrate the dropdown", " 4 Intro to dashboards 4.1 Basic structure Preview a simple shinydashboard Create and preview a simple shinydashboard ui &lt;- dashboardPage( dashboardHeader(title = &quot;Quick Example&quot;), dashboardSidebar(selectInput(&quot;select&quot;, &quot;Selection&quot;, c(&quot;one&quot;, &quot;two&quot;))), dashboardBody( valueBoxOutput(&quot;total&quot;), dataTableOutput(&quot;monthly&quot;) ) ) server &lt;- function(input, output, session) { output$total &lt;- renderValueBox(valueBox(100, subtitle = &quot;Flights&quot;)) output$monthly &lt;- renderDataTable(datatable(mtcars)) } shinyApp(ui, server) 4.2 Dropdown data Review a technique to populate a dropdown Use purrr to create a list with the correct structure for the shiny dropdown airline_list &lt;- carriers %&gt;% select(carrier, carriername) %&gt;% # In case more fields are added collect() %&gt;% # All would be collected anyway split(.$carriername) %&gt;% # Create a list item for each name map(~.$carrier) # Add the carrier code to each item head(airline_list) ## $`AirTran Airways Corporation` ## [1] &quot;FL&quot; ## ## $`Alaska Airlines Inc.` ## [1] &quot;AS&quot; ## ## $`Aloha Airlines Inc.` ## [1] &quot;AQ&quot; ## ## $`American Airlines Inc.` ## [1] &quot;AA&quot; ## ## $`American Eagle Airlines Inc.` ## [1] &quot;MQ&quot; ## ## $`Atlantic Southeast Airlines` ## [1] &quot;EV&quot; In the app code, replace c(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;) with airline_list # Goes from this: dashboardSidebar(selectInput(&quot;select&quot;, &quot;Selection&quot;, c(&quot;one&quot;, &quot;two&quot;))), # To this: dashboardSidebar(selectInput(&quot;select&quot;, &quot;Selection&quot;, airline_list)), Re-run the app 4.3 Update dashboard items Create base query for the dashboard using dplyr and pass the results to the dashboard Save the base “query” to a variable. It will contain a carrier selection. To transition into shiny programming easier, the variable will be a function. base_dashboard &lt;- function(){ flights %&gt;% filter(uniquecarrier == &quot;DL&quot;) } head(base_dashboard()) ## # Source: lazy query [?? x 29] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## year month dayof… dayo… dept… crsd… arrt… crsa… uniq… flig… tail… actu… ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2008 7.00 17.0 4.00 1914 1916 1926 1934 DL 1879 N375… 72.0 ## 2 2008 7.00 17.0 4.00 1642 1634 1827 1755 DL 1881 N917… 105 ## 3 2008 7.00 17.0 4.00 1910 1846 2012 1958 DL 1881 N906… 182 ## 4 2008 7.00 17.0 4.00 2215 2156 2320 2321 DL 1882 N941… 65.0 ## 5 2008 7.00 17.0 4.00 908 915 1010 1026 DL 1883 N934… 122 ## 6 2008 7.00 17.0 4.00 1002 950 1129 1118 DL 1884 N605… 87.0 ## # ... with 17 more variables: crselapsedtime &lt;dbl&gt;, airtime &lt;dbl&gt;, ## # arrdelay &lt;dbl&gt;, depdelay &lt;dbl&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, ## # distance &lt;dbl&gt;, taxiin &lt;dbl&gt;, taxiout &lt;dbl&gt;, cancelled &lt;dbl&gt;, ## # cancellationcode &lt;chr&gt;, diverted &lt;dbl&gt;, carrierdelay &lt;dbl&gt;, ## # weatherdelay &lt;dbl&gt;, nasdelay &lt;dbl&gt;, securitydelay &lt;dbl&gt;, ## # lateaircraftdelay &lt;dbl&gt; Use the base query to figure the number of flights for that carrier base_dashboard() %&gt;% tally() %&gt;% pull() ## integer64 ## [1] 451931 In the app, remove the 100 number and pipe the dplyr code into the valueBox() function # Goes from this: output$total &lt;- renderValueBox(valueBox(100, subtitle = &quot;Flights&quot;)) # To this: output$total &lt;- renderValueBox( base_dashboard() %&gt;% tally() %&gt;% pull() %&gt;% valueBox(subtitle = &quot;Flights&quot;)) Create a table with the month name and the number of flights for that month base_dashboard() %&gt;% group_by(month) %&gt;% tally() %&gt;% collect() %&gt;% mutate(n = as.numeric(n)) %&gt;% rename(flights = n) %&gt;% arrange(month) ## # A tibble: 12 x 2 ## month flights ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1.00 38256 ## 2 2.00 36275 ## 3 3.00 39829 ## 4 4.00 37049 ## 5 5.00 36349 ## 6 6.00 37844 ## 7 7.00 39335 ## 8 8.00 38173 ## 9 9.00 36304 ## 10 10.0 38645 ## 11 11.0 36939 ## 12 12.0 36933 In the app, replace head(mtcars) with the piped code, and re-run the app # Goes from this: output$monthly &lt;- renderTable(head(mtcars)) # To this: output$monthly &lt;- renderDataTable(datatable( base_dashboard() %&gt;% group_by(month) %&gt;% tally() %&gt;% collect() %&gt;% mutate(n = as.numeric(n)) %&gt;% rename(flights = n) %&gt;% arrange(month))) 4.4 Integrate the dropdown Use shiny’s reactive() function to integrate the user input in one spot In the original base_dashboard() code, replace function with reactive, and &quot;DL&quot; with input$select # Goes from this base_dashboard &lt;- function(){ flights %&gt;% filter(uniquecarrier == &quot;DL&quot;)} # To this base_dashboard &lt;- reactive({ flights %&gt;% filter(uniquecarrier == input$select)}) Insert the new code right after the server &lt;- function(input, output, session) line. The full code should now look like this: ui &lt;- dashboardPage( dashboardHeader(title = &quot;Quick Example&quot;), dashboardSidebar(selectInput(&quot;select&quot;, &quot;Selection&quot;, airline_list)), dashboardBody( valueBoxOutput(&quot;total&quot;), dataTableOutput(&quot;monthly&quot;) ) ) server &lt;- function(input, output, session) { base_dashboard &lt;- reactive({ flights %&gt;% filter(uniquecarrier == input$select)}) output$total &lt;- renderValueBox( base_dashboard() %&gt;% tally() %&gt;% pull() %&gt;% valueBox(subtitle = &quot;Flights&quot;)) output$monthly &lt;- renderDataTable(datatable( base_dashboard() %&gt;% group_by(month) %&gt;% tally() %&gt;% collect() %&gt;% mutate(n = as.numeric(n)) %&gt;% rename(flights = n) %&gt;% arrange(month) )) } shinyApp(ui, server) Re-run the app "],
["dashboard-drill-down.html", "5 Dashboard drill-down 5.1 Add a tabset to the dashboard 5.2 Add interactivity 5.3 Add title to the new tab", " 5 Dashboard drill-down 5.1 Add a tabset to the dashboard Prepare the ui to accept new tabs based on the user’s input Wrap the “output” functions in the ui with a tabPanel() # Goes from this valueBoxOutput(&quot;total&quot;), dataTableOutput(&quot;monthly&quot;) # To this tabPanel( valueBoxOutput(&quot;total&quot;), dataTableOutput(&quot;monthly&quot;) ) Set the panel’s title and value. The new code should look like this tabPanel( title = &quot;Dashboard&quot;, value = &quot;page1&quot;, valueBoxOutput(&quot;total&quot;), dataTableOutput(&quot;monthly&quot;) ) Wrap that code inside a tabsetPanel(), set the id to tabs tabsetPanel(id = &quot;tabs&quot;, tabPanel( title = &quot;Dashboard&quot;, value = &quot;page1&quot;, valueBoxOutput(&quot;total&quot;), dataTableOutput(&quot;monthly&quot;) ) ) Re-run the app 5.2 Add interactivity Add an click-event that creates a new tab Set the selection and rownames in the current datatable() function output$monthly &lt;- renderDataTable(datatable({ base_dashboard() %&gt;% group_by(month) %&gt;% tally() %&gt;% collect() %&gt;% mutate(n = as.numeric(n)) %&gt;% rename(flights = n) %&gt;% arrange(month)}, list( target = &quot;cell&quot;), # New code rownames = FALSE)) # New code Use observeEvent() and appendTab() to add the interactivity observeEvent(input$monthly_cell_clicked, { appendTab(inputId = &quot;tabs&quot;, # This is the tabsets panel&#39;s ID tabPanel(&quot;test_new&quot;, # This will be the label of the new tab renderDataTable(mtcars, rownames = FALSE)))}) Re-run the app Click on a row inside the datatable and then select the new tab called test_new to see the mtcars data 5.3 Add title to the new tab Use the input’s info to create a custom label Load the clicked cell’s info into a variable, and create a new lable by concatenating the cell’s month and the selected airline’s code observeEvent(input$monthly_cell_clicked, { cell &lt;- input$monthly_cell_clicked # New code if(!is.null(cell$value)){ # New code tab_title &lt;- paste0(month.name[cell$value], &quot;_&quot;, input$select) appendTab(inputId = &quot;tabs&quot;, tabPanel(tab_title, # Changed code renderDataTable(mtcars, rownames = FALSE))) }}) Re-run the app, and click on one of the month’s to confirm that the new label works Use updateTabsetPanel to switch the dashboard’s focus to the newly created tab. It goes after the tabPanel() code updateTabsetPanel(session, &quot;tabs&quot;, selected = tab_title) "],
["database-operations.html", "6 Database operations 6.1 Case 1 - Data enrichment", " 6 Database operations 6.1 Case 1 - Data enrichment Upload a small dataset in order to combine it with the datawarehouse data Load the planes data into memory planes &lt;- nycflights13::planes Using DBI, copy the planes data to the datawarehouse as a temporary table dbWriteTable(con, &quot;planes&quot;, planes, temporary = TRUE) Using dplyr, create a variable pointer to the new table tbl_planes &lt;- tbl(con, &quot;planes&quot;) tbl_planes Create a “lazy” variable that joins the flights table to the new temp table combined &lt;- flights %&gt;% left_join(tbl_planes, by = &quot;tailnum&quot;) View a sample of flights of planes with more than 100 seats combined %&gt;% filter(seats &gt; 100) %&gt;% head() See how many flights each plane McDonnel Douglas had combined %&gt;% filter(manufacturer == &quot;MCDONNELL DOUGLAS&quot;) %&gt;% group_by(tailnum) %&gt;% tally() Get the total number of planes, and the average, minimum &amp; maximum number of flights for the manufacturer combined %&gt;% filter(manufacturer == &quot;MCDONNELL DOUGLAS&quot;) %&gt;% group_by(tailnum) %&gt;% tally() %&gt;% summarise(planes = n(), avg_flights = mean(n), max_flights = max(n), min_flights = min(n)) Remove the temp table dbRemoveTable(con, &quot;planes&quot;) dbDisconnect(con) "],
["data-visualizations.html", "7 Data Visualizations 7.1 Simple plot 7.2 Plot in one code segment 7.3 Plot specific data segments 7.4 Two or more queries 7.5 Visualize using dbplot 7.6 Plot a different aggregation 7.7 Create a histogram 7.8 Raster plot 7.9 Using the calculate functions 7.10 Under the hood (II)", " 7 Data Visualizations 7.1 Simple plot Practice pushing the calculations to the database Use collect() bring back the aggregated results into a “pass-through” variable called by_month by_month &lt;- flights %&gt;% group_by(month) %&gt;% tally() %&gt;% mutate(n = as.numeric(n)) %&gt;% collect() head(by_month) Plot results using ggplot2 library(ggplot2) ggplot(by_month) + geom_line(aes(x = month, y = n)) 7.2 Plot in one code segment Practice going from dplyr to ggplot2 without using pass-through variable, great for EDA Using the code from the previous section, create a single piped code set which also creates the plot flights %&gt;% group_by(month) %&gt;% tally() %&gt;% mutate(n = as.numeric(n)) %&gt;% collect() %&gt;% ggplot() + # &lt; Don&#39;t forget to switch to `+` geom_line(aes(x = month, y = n)) Change the aggregation to the average of arrdelay. Tip: Use x as the summarize variable flights %&gt;% group_by(month) %&gt;% summarise(x = mean(arrdelay)) %&gt;% mutate(x = as.numeric(x)) %&gt;% collect() %&gt;% ggplot() + geom_line(aes(x = month, y = x)) Plot the average distance flights %&gt;% group_by(month) %&gt;% summarise(x = mean(distance)) %&gt;% mutate(x = as.numeric(x)) %&gt;% collect() %&gt;% ggplot() + geom_line(aes(x = month, y = x)) 7.3 Plot specific data segments Combine skills from previous units to create more sophisticated plots Start with getting the top 5 carriers flights %&gt;% group_by(uniquecarrier) %&gt;% tally() %&gt;% arrange(desc(n)) %&gt;% head(5) Start with getting the top 5 carriers flights %&gt;% group_by(uniquecarrier) %&gt;% tally() %&gt;% mutate(n = as.numeric(n)) %&gt;% arrange(desc(n)) %&gt;% head(5) %&gt;% collect() %&gt;% ggplot() + geom_col(aes(x = uniquecarrier, y = n)) Improve the plot’s look flights %&gt;% group_by(uniquecarrier) %&gt;% tally() %&gt;% mutate(n = as.numeric(n)) %&gt;% arrange(desc(n)) %&gt;% head(5) %&gt;% collect() %&gt;% ggplot() + #Don&#39;t forget to switch to `+` geom_col(aes(x = uniquecarrier, y = n, fill = n)) + #Add fill theme(legend.position=&quot;none&quot;) + # Turn legend off coord_flip() + # Rotate cols into rows labs(title = &quot;Top 5 Carriers&quot;, subtitle = &quot;Source: Datawarehouse&quot;, x = &quot;Carrier Name&quot;, y = &quot;# of Flights&quot;) 7.4 Two or more queries Learn how to use pull() to pass a set of values to be used on a secondary query Use pull() to get the top 5 carriers loaded in a vector top5 &lt;- flights %&gt;% group_by(uniquecarrier) %&gt;% tally() %&gt;% arrange(desc(n)) %&gt;% head(5) %&gt;% pull(uniquecarrier) top5 Use %in% to pass the top5 vector to a filter flights %&gt;% filter(uniquecarrier %in% top5) Group by carrier and get the average arrival delay flights %&gt;% filter(uniquecarrier %in% top5) %&gt;% group_by(uniquecarrier) %&gt;% summarise(n = mean(arrdelay)) Copy the final ggplot() code from the Plot specific segment section. Update the y labs. flights %&gt;% filter(uniquecarrier %in% top5) %&gt;% group_by(uniquecarrier) %&gt;% summarise(n = mean(arrdelay)) %&gt;% # From previous section ---------------------------------------------- collect() %&gt;% ggplot() + #Don&#39;t forget to switch to `+` geom_col(aes(x = uniquecarrier, y = n, fill = n)) + #Add fill theme(legend.position=&quot;none&quot;) + # Turn legend off coord_flip() + # Rotate cols into rows labs(title = &quot;Top 5 Carriers&quot;, subtitle = &quot;Source: Datawarehouse&quot;, x = &quot;Carrier Name&quot;, y = &quot;Average Delay&quot;) 7.5 Visualize using dbplot Review how to use dbplot to make it easier to plot with databases Install and load dbplot install.packages(&quot;dbplot&quot;) library(dbplot) Create a line plot using the helper function dbplot_line() flights %&gt;% dbplot_line(month) Update the plot’s labels flights %&gt;% dbplot_line(month) + labs(title = &quot;Monthly flights&quot;, x = &quot;Month&quot;, y = &quot;Number of flights&quot;) 7.6 Plot a different aggregation dbplot allows for aggregate functions, other than record count, to be used for plotting Plot the average departure delay by day of week flights %&gt;% dbplot_bar(dayofweek, mean(depdelay)) Change the day numbers to day name labels flights %&gt;% dbplot_bar(dayofweek, mean(depdelay)) + scale_x_continuous(labels = c(&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;,&quot;Sun&quot;), breaks = 1:7) 7.7 Create a histogram Use the package’s function to easily create a histogram Use the dbplot_histogram() to build the histogram flights %&gt;% dbplot_histogram(distance) Adjust the binwidth to 300 flights %&gt;% dbplot_histogram(distance, binwidth = 300) 7.8 Raster plot Use a dbplot_raster() to visualize deptime versus depdelay flights %&gt;% dbplot_raster(deptime, arrtime) Change the plot’s resolution to 500 flights %&gt;% dbplot_raster(deptime, arrtime, resolution = 500) 7.9 Using the calculate functions Use the db_comptue_raster() function to get the underlying results that feed the plot departure &lt;- flights %&gt;% db_compute_raster(deptime, arrtime) departure Plot the results “manually” departure %&gt;% filter(`n()` &gt; 1000) %&gt;% ggplot() + geom_raster(aes(x = deptime, y = arrtime, fill = `n()`)) 7.10 Under the hood (II) Review how dbplot pushes histogram and raster calculations to the database Use the db_bin() command to see the resulting tidy eval formula db_bin(field) Use trasnlate_sql() and simulate_odbc_postgresql() to see an example of what the resulting SQL statement looks like translate_sql(!! db_bin(field), con = simulate_odbc_postgresql()) "]
]
