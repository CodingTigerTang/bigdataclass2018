[
["index.html", "Big Data with R - Exercise book", " Big Data with R - Exercise book Learn how to use R with Hive, SQL Server, Oracle and other scalable external data sources along with Big Data clusters in this two-day workshop. We will cover how to connect, retrieve schema information, upload data, and explore data outside of R. For databases, we will focus on the dplyr, DBI and odbc packages. These packages enable us to use the same dplyr verbs inside R but are translated and sent as SQL queries. For Big Data clusters, we will also learn how to use the sparklyr package to run models inside Spark and return the results to R. We will review recommendations for connection settings, security best practices and deployment options. Throughout the workshop, we will take advantage of the new data connections available with the RStudio IDE. "],
["access-a-database.html", "1 Access a database 1.1 Connect to a database 1.2 Explore the database using the RStudio IDE 1.3 List drivers and DSNs 1.4 Connect to a database using code 1.5 Connect to a database without a DSN 1.6 Secure credentials in a file 1.7 Environment variables 1.8 Use options()", " 1 Access a database 1.1 Connect to a database The simpliest way to connect to a database. More complex examples will be examined later in the class. Click on the Connections tab Click on the New Connection button Select Postgres Dev Click OK 1.2 Explore the database using the RStudio IDE Becoming familiar with the new interface for databases inside the RStudio IDE Expand the datawarehouse schema Expand the airport table Click on the table icon to the right of the airport table (Optional) Expand and explore the other tables Click on the disconnect icon to close the connection 1.3 List drivers and DSNs Learn how to use the odbc package to get DB info from your machine To get a list of drivers available in the server library(odbc) odbcListDrivers()[1:2] ## name attribute ## 1 PostgreSQL ANSI Description ## 2 PostgreSQL ANSI Driver ## 3 PostgreSQL ANSI Setup ## 4 PostgreSQL ANSI Debug ## 5 PostgreSQL ANSI CommLog ## 6 PostgreSQL ANSI UsageCount ## 7 PostgreSQL Unicode Description ## 8 PostgreSQL Unicode Driver ## 9 PostgreSQL Unicode Setup ## 10 PostgreSQL Unicode Debug ## 11 PostgreSQL Unicode CommLog ## 12 PostgreSQL Unicode UsageCount ## 13 AmazonRedshift Driver ## 14 Hive Driver ## 15 Impala Driver ## 16 Oracle Driver ## 17 PostgreSQL Driver ## 18 Salesforce Driver ## 19 SQLServer Driver ## 20 Teradata Driver Click on the ellipsis button located in the Files tab Type: /etc Locate and open the odbcinst.ini file To see a list of DSNs available in the server odbcListDataSources() ## name description ## 1 Postgres Dev PostgreSQL ## 2 Postgres Prod PostgreSQL Using the ellipsis button again, navigate to /etc/odbc.ini 1.4 Connect to a database using code Use the odbc package along with DBI to open a connection to a database Run the following code to connect library(DBI) con &lt;- dbConnect(odbc::odbc(), &quot;Postgres Dev&quot;) Use dbListTables() to retrieve a list of tables dbListTables(con) ## [1] &quot;airport&quot; &quot;carrier&quot; &quot;flight&quot; &quot;vflight&quot; Use dbGetQuery() to run a quick query odbc::dbGetQuery(con, &quot;SELECT * FROM datawarehouse.airport LIMIT 10&quot;) ## airport airportname city state country ## 1 ABE Lehigh Valley International Allentown PA USA ## 2 ABI Abilene Regional Abilene TX USA ## 3 ABQ Albuquerque International Albuquerque NM USA ## 4 ABY Southwest Georgia Regional Albany GA USA ## 5 ACK Nantucket Memorial Nantucket MA USA ## 6 ACT Waco Regional Waco TX USA ## 7 ACV Arcata Arcata/Eureka CA USA ## 8 ACY Atlantic City International Atlantic City NJ USA ## 9 ADK Adak Adak AK USA ## 10 ADQ Kodiak Kodiak AK USA ## lat long ## 1 40.65236 -75.44040 ## 2 32.41132 -99.68190 ## 3 35.04022 -106.60919 ## 4 31.53552 -84.19447 ## 5 41.25305 -70.06018 ## 6 31.61129 -97.23052 ## 7 40.97812 -124.10862 ## 8 39.45758 -74.57717 ## 9 51.87796 -176.64603 ## 10 57.74997 -152.49386 Disconnect from the database using dbDisconnect() dbDisconnect(con) 1.5 Connect to a database without a DSN A more complex way of connecting to a database, using best practices: http://db.rstudio.com/best-practices/managing-credentials/#prompt-for-credentials Use the following code to start a new connection that does not use the pre-defined DSN con &lt;- dbConnect( odbc::odbc(), Driver = &quot;PostgreSQL&quot;, Server = &quot;localhost&quot;, UID = rstudioapi::askForPassword(&quot;Database user&quot;), PWD = rstudioapi::askForPassword(&quot;Database password&quot;), Port = 5432, Database = &quot;postgres&quot; ) When prompted, type in rstudio_dev for the user, and dev_user as the password 1.6 Secure credentials in a file Credentials can be saved in a YAML file and then read using the config package: http://db.rstudio.com/best-practices/managing-credentials/#stored-in-a-file-with-config Open and explore the config.yml file available in your working directory Load the datawarehouse-dev vaelus to a variable dw &lt;- config::get(&quot;datawarehouse-dev&quot;) Check that the variable loaded propery, by checking the driver value dw$driver ## [1] &quot;PostgreSQL&quot; Use info in the config.yml file to connect to the database con &lt;- dbConnect(odbc::odbc(), Driver = dw$driver, Server = dw$server, UID = dw$uid, PWD = dw$pwd, Port = dw$port, Database = dw$database ) 1.7 Environment variables Use .Renviron file to store credentials Open and explore the .Renviron file available in your working directory Confirm that the environment variables are loaded by using Sys.getenv() Sys.getenv(&quot;uid&quot;) ## [1] &quot;rstudio_dev&quot; Pass the credentials using the environment variables con &lt;- dbConnect( odbc::odbc(), Driver = &quot;PostgreSQL&quot;, Server = &quot;localhost&quot;, UID = Sys.getenv(&quot;uid&quot;), PWD = Sys.getenv(&quot;pwd&quot;), Port = 5432, Database = &quot;postgres&quot; ) 1.8 Use options() Set options() in a separate R script Open and explore the options.R script available in your working directory Source the options.R script source(&quot;options.R&quot;) Confirm that the environment variables are loaded by using Sys.getenv() getOption(&quot;database_userid&quot;) ## [1] &quot;rstudio_dev&quot; Pass the credentials using the environment variables con &lt;- dbConnect( odbc::odbc(), Driver = &quot;PostgreSQL&quot;, Server = &quot;localhost&quot;, UID = getOption(&quot;database_userid&quot;), PWD = getOption(&quot;database_password&quot;), Port = 5432, Database = &quot;postgres&quot; ) "],
["dplyr-basics.html", "2 dplyr Basics 2.1 Create a table variable 2.2 Basic aggregation 2.3 Under the hood 2.4 Un-translated R commands 2.5 Using bang-bang", " 2 dplyr Basics 2.1 Create a table variable Basics to how to point a variable in R to a table or view inside the database Load the dplyr and dbplyr libraries library(dplyr) library(dbplyr) (Optional) Open a connection to the database if it’s currently closed library(DBI) con &lt;- dbConnect(odbc::odbc(), &quot;Postgres Dev&quot;) Use the tbl() and in_schema() functions to create a reference to a table tbl(con, in_schema(&quot;datawarehouse&quot;, &quot;airport&quot;)) ## # Source: table&lt;datawarehouse.airport&gt; [?? x 7] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## airport airportname city state country lat long ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ABE Lehigh Valley International Allento… PA USA 40.7 - 75.4 ## 2 ABI Abilene Regional Abilene TX USA 32.4 - 99.7 ## 3 ABQ Albuquerque International Albuque… NM USA 35.0 -107 ## 4 ABY Southwest Georgia Regional Albany GA USA 31.5 - 84.2 ## 5 ACK Nantucket Memorial Nantuck… MA USA 41.3 - 70.1 ## 6 ACT Waco Regional Waco TX USA 31.6 - 97.2 ## 7 ACV Arcata Arcata/… CA USA 41.0 -124 ## 8 ACY Atlantic City International Atlanti… NJ USA 39.5 - 74.6 ## 9 ADK Adak Adak AK USA 51.9 -177 ## 10 ADQ Kodiak Kodiak AK USA 57.7 -152 ## # ... with more rows Load the reference, not the table data, into a variable airports &lt;- tbl(con, in_schema(&quot;datawarehouse&quot;, &quot;airport&quot;)) Call the variable to see preview the data in the table airports ## # Source: table&lt;datawarehouse.airport&gt; [?? x 7] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## airport airportname city state country lat long ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ABE Lehigh Valley International Allento… PA USA 40.7 - 75.4 ## 2 ABI Abilene Regional Abilene TX USA 32.4 - 99.7 ## 3 ABQ Albuquerque International Albuque… NM USA 35.0 -107 ## 4 ABY Southwest Georgia Regional Albany GA USA 31.5 - 84.2 ## 5 ACK Nantucket Memorial Nantuck… MA USA 41.3 - 70.1 ## 6 ACT Waco Regional Waco TX USA 31.6 - 97.2 ## 7 ACV Arcata Arcata/… CA USA 41.0 -124 ## 8 ACY Atlantic City International Atlanti… NJ USA 39.5 - 74.6 ## 9 ADK Adak Adak AK USA 51.9 -177 ## 10 ADQ Kodiak Kodiak AK USA 57.7 -152 ## # ... with more rows Set up the pointers to the other of the tables flights &lt;- tbl(con, in_schema(&quot;datawarehouse&quot;, &quot;flight&quot;)) carriers &lt;- tbl(con, in_schema(&quot;datawarehouse&quot;, &quot;carrier&quot;)) 2.2 Basic aggregation A couple of dplyr commands that run in-database How many records are in the airport table? tbl(con, in_schema(&quot;datawarehouse&quot;, &quot;vflight&quot;)) %&gt;% group_by(month) %&gt;% tally() ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## month n ## &lt;dbl&gt; &lt;S3: integer64&gt; ## 1 10.0 556205 ## 2 4.00 598126 ## 3 12.0 544958 ## 4 5.00 606293 ## 5 2.00 569236 ## 6 7.00 627931 ## 7 11.0 523272 ## 8 9.00 540908 ## 9 1.00 605765 ## 10 3.00 616090 ## # ... with more rows What is the average character length of the airport codes? How many characters is the longest and the shortest airport name? airports %&gt;% summarise( avg_airport_length = mean(length(airport), na.rm = TRUE), max_airport_name = max(length(airportname), na.rm = TRUE), min_airport_name = min(length(airportname), na.rm = TRUE), total_records = n() ) ## # Source: lazy query [?? x 4] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## avg_airport_length max_airport_name min_airport_name total_records ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;S3: integer64&gt; ## 1 3.00 40 3 305 Additional exercises: How many records are in the carrier table? How many characters is the longest carriername? 2.3 Under the hood Use show_query() to preview the SQL statement that will be sent to the database* SQL statement that actually runs when we ran airports as a command show_query(airports) ## &lt;SQL&gt; ## SELECT * ## FROM datawarehouse.airport Easily view the resulting query by adding show_query() in another piped command carriers %&gt;% summarise(n()) ## # Source: lazy query [?? x 1] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## `n()` ## &lt;S3: integer64&gt; ## 1 20 Run the same for last exercise in the previous section airports %&gt;% summarise( avg_airport_length = mean(length(airport), na.rm = TRUE), max_airport_name = max(length(airportname), na.rm = TRUE), min_airport_name = min(length(airportname), na.rm = TRUE), total_records = n() ) %&gt;% show_query() ## &lt;SQL&gt; ## SELECT AVG(LENGTH(&quot;airport&quot;)) AS &quot;avg_airport_length&quot;, MAX(LENGTH(&quot;airportname&quot;)) AS &quot;max_airport_name&quot;, MIN(LENGTH(&quot;airportname&quot;)) AS &quot;min_airport_name&quot;, COUNT(*) AS &quot;total_records&quot; ## FROM datawarehouse.airport 2.4 Un-translated R commands Review of how dbplyr handles R commands that have not been translated into a like-SQL command Preview how Sys.time() is translated airports %&gt;% mutate(today = Sys.time()) %&gt;% show_query() ## &lt;SQL&gt; ## SELECT &quot;airport&quot;, &quot;airportname&quot;, &quot;city&quot;, &quot;state&quot;, &quot;country&quot;, &quot;lat&quot;, &quot;long&quot;, SYS.TIME() AS &quot;today&quot; ## FROM datawarehouse.airport Use PostgreSQL’s native commands, in this case now() airports %&gt;% mutate(today = now()) %&gt;% show_query() ## &lt;SQL&gt; ## SELECT &quot;airport&quot;, &quot;airportname&quot;, &quot;city&quot;, &quot;state&quot;, &quot;country&quot;, &quot;lat&quot;, &quot;long&quot;, NOW() AS &quot;today&quot; ## FROM datawarehouse.airport Run the dplyr code to confirm it works airports %&gt;% mutate(today = now()) %&gt;% select(today) %&gt;% head() ## # Source: lazy query [?? x 1] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## today ## &lt;dttm&gt; ## 1 2018-01-26 00:08:57 ## 2 2018-01-26 00:08:57 ## 3 2018-01-26 00:08:57 ## 4 2018-01-26 00:08:57 ## 5 2018-01-26 00:08:57 ## 6 2018-01-26 00:08:57 2.5 Using bang-bang Intro on passing unevaluated code to a dplyr verb Preview how Sys.time() is translated airports %&gt;% mutate(today = Sys.time()) %&gt;% show_query() ## &lt;SQL&gt; ## SELECT &quot;airport&quot;, &quot;airportname&quot;, &quot;city&quot;, &quot;state&quot;, &quot;country&quot;, &quot;lat&quot;, &quot;long&quot;, SYS.TIME() AS &quot;today&quot; ## FROM datawarehouse.airport Preview how Sys.time() is translated when prefixing !! airports %&gt;% mutate(today = !!Sys.time()) %&gt;% show_query() ## &lt;SQL&gt; ## SELECT &quot;airport&quot;, &quot;airportname&quot;, &quot;city&quot;, &quot;state&quot;, &quot;country&quot;, &quot;lat&quot;, &quot;long&quot;, &#39;2018-01-26T00:08:57Z&#39; AS &quot;today&quot; ## FROM datawarehouse.airport Preview how Sys.time() is translated when prefixing !! airports %&gt;% mutate(today = !!Sys.time()) %&gt;% head() ## # Source: lazy query [?? x 8] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## airport airportname city state country lat long today ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 ABE Lehigh Valley Int… Allent… PA USA 40.7 - 75.4 2018-01-2… ## 2 ABI Abilene Regional Abilene TX USA 32.4 - 99.7 2018-01-2… ## 3 ABQ Albuquerque Inter… Albuqu… NM USA 35.0 -107 2018-01-2… ## 4 ABY Southwest Georgia… Albany GA USA 31.5 - 84.2 2018-01-2… ## 5 ACK Nantucket Memorial Nantuc… MA USA 41.3 - 70.1 2018-01-2… ## 6 ACT Waco Regional Waco TX USA 31.6 - 97.2 2018-01-2… "],
["data-transformation.html", "3 Data transformation 3.1 Group and sort records 3.2 Answering questions with dplyr 3.3 Aggregate mulitple columns 3.4 View record level data 3.5 Case statements 3.6 Data enrichment", " 3 Data transformation 3.1 Group and sort records Learn how to use group_by() and arrange() to better understand aggregated data How many flights are there per month? flights %&gt;% group_by(month) %&gt;% tally() ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## month n ## &lt;dbl&gt; &lt;S3: integer64&gt; ## 1 10.0 556205 ## 2 4.00 598126 ## 3 12.0 544958 ## 4 5.00 606293 ## 5 2.00 569236 ## 6 7.00 627931 ## 7 11.0 523272 ## 8 9.00 540908 ## 9 1.00 605765 ## 10 3.00 616090 ## # ... with more rows Order the results by the month number flights %&gt;% group_by(month) %&gt;% tally() %&gt;% arrange(month) ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## # Ordered by: month ## month n ## &lt;dbl&gt; &lt;S3: integer64&gt; ## 1 1.00 605765 ## 2 2.00 569236 ## 3 3.00 616090 ## 4 4.00 598126 ## 5 5.00 606293 ## 6 6.00 608665 ## 7 7.00 627931 ## 8 8.00 612279 ## 9 9.00 540908 ## 10 10.0 556205 ## # ... with more rows Order the results by the number of flights, starting with the month with most flights by using desc() inside the arrange() command flights %&gt;% group_by(month) %&gt;% tally() %&gt;% arrange(desc(n)) ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## # Ordered by: desc(n) ## month n ## &lt;dbl&gt; &lt;S3: integer64&gt; ## 1 7.00 627931 ## 2 3.00 616090 ## 3 8.00 612279 ## 4 6.00 608665 ## 5 5.00 606293 ## 6 1.00 605765 ## 7 4.00 598126 ## 8 2.00 569236 ## 9 10.0 556205 ## 10 12.0 544958 ## # ... with more rows 3.2 Answering questions with dplyr Quick review of how to translate questions into dplyr code Which are the top 4 months with the most flight activity? flights %&gt;% group_by(month) %&gt;% tally() %&gt;% arrange(desc(n)) %&gt;% head(4) ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## # Ordered by: desc(n) ## month n ## &lt;dbl&gt; &lt;S3: integer64&gt; ## 1 7.00 627931 ## 2 3.00 616090 ## 3 8.00 612279 ## 4 6.00 608665 What were the top 5 calendar days with most flight activity? flights %&gt;% group_by(month, dayofmonth) %&gt;% tally() %&gt;% arrange(desc(n)) %&gt;% head(5) ## # Source: lazy query [?? x 3] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## # Groups: month ## # Ordered by: desc(n) ## month dayofmonth n ## &lt;dbl&gt; &lt;dbl&gt; &lt;S3: integer64&gt; ## 1 7.00 18.0 21128 ## 2 7.00 11.0 21125 ## 3 7.00 25.0 21102 ## 4 7.00 10.0 21058 ## 5 7.00 17.0 21055 Which are the top 5 carriers (airlines) with the most flights? flights %&gt;% group_by(uniquecarrier) %&gt;% tally() %&gt;% arrange(desc(n)) %&gt;% head(5) ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## # Ordered by: desc(n) ## uniquecarrier n ## &lt;chr&gt; &lt;S3: integer64&gt; ## 1 WN 1201754 ## 2 AA 604885 ## 3 OO 567159 ## 4 MQ 490693 ## 5 US 453589 Figure the percent ratio of flights per month flights %&gt;% group_by(month) %&gt;% tally() %&gt;% arrange(desc(n)) %&gt;% mutate(percent = n/sum(n, na.rm = TRUE)) ## # Source: lazy query [?? x 3] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## # Ordered by: desc(n) ## month n percent ## &lt;dbl&gt; &lt;S3: integer64&gt; &lt;dbl&gt; ## 1 7.00 627931 0.0896 ## 2 3.00 616090 0.0879 ## 3 8.00 612279 0.0873 ## 4 6.00 608665 0.0868 ## 5 5.00 606293 0.0865 ## 6 1.00 605765 0.0864 ## 7 4.00 598126 0.0853 ## 8 2.00 569236 0.0812 ## 9 10.0 556205 0.0793 ## 10 12.0 544958 0.0777 ## # ... with more rows 3.3 Aggregate mulitple columns Practice using summarise _ functions Use summarise_all() to send the same function to all fields flights %&gt;% select(depdelay, arrdelay) %&gt;% summarise_all(mean, na.rm = TRUE) ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## depdelay arrdelay ## &lt;dbl&gt; &lt;dbl&gt; ## 1 9.78 7.99 Use summarise_at() to pre-select the fields that will receive the function flights %&gt;% summarise_at(c(&quot;depdelay&quot;, &quot;arrdelay&quot;),mean, na.rm = TRUE) ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## depdelay arrdelay ## &lt;dbl&gt; &lt;dbl&gt; ## 1 9.78 7.99 Use summarise_if() to summarize only if the field meets a criterion flights %&gt;% summarise_if(is.numeric,mean, na.rm = TRUE) ## Applying predicate on the first 100 rows ## # Source: lazy query [?? x 25] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## year month dayofmonth dayofweek deptime crsdeptime arrtime crsarrtime ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2008 6.38 15.7 3.92 1308 1326 1449 1495 ## # ... with 17 more variables: flightnum &lt;dbl&gt;, actualelapsedtime &lt;dbl&gt;, ## # crselapsedtime &lt;dbl&gt;, airtime &lt;dbl&gt;, arrdelay &lt;dbl&gt;, depdelay &lt;dbl&gt;, ## # distance &lt;dbl&gt;, taxiin &lt;dbl&gt;, taxiout &lt;dbl&gt;, cancelled &lt;dbl&gt;, ## # diverted &lt;dbl&gt;, carrierdelay &lt;dbl&gt;, weatherdelay &lt;dbl&gt;, ## # nasdelay &lt;dbl&gt;, securitydelay &lt;dbl&gt;, lateaircraftdelay &lt;dbl&gt;, ## # flightid &lt;dbl&gt; Combine with group_by() to create more complex results flights %&gt;% select(month, depdelay, arrdelay) %&gt;% group_by(month) %&gt;% summarise_all(mean, na.rm = TRUE) ## # Source: lazy query [?? x 3] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## month depdelay arrdelay ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 10.0 3.78 0.412 ## 2 4.00 8.06 6.68 ## 3 12.0 16.8 16.1 ## 4 5.00 7.56 5.91 ## 5 2.00 13.2 12.6 ## 6 7.00 11.6 9.78 ## 7 11.0 5.38 2.00 ## 8 9.00 3.89 0.684 ## 9 1.00 11.1 9.88 ## 10 3.00 12.2 10.9 ## # ... with more rows 3.4 View record level data Important tips to record preview data How many flights in July 18th were one or more hours late? flights %&gt;% filter(depdelay &gt;= 60, month == 7, dayofmonth == 18) %&gt;% tally() ## # Source: lazy query [?? x 1] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## n ## &lt;S3: integer64&gt; ## 1 1239 Use filter() to retrieve only the needed data, and head() to limit the preview even further. flights %&gt;% filter(depdelay &gt;= 60, month == 7, dayofmonth == 18) %&gt;% head(100) ## # Source: lazy query [?? x 30] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## year month dayofmonth dayofweek deptime crsdeptime arrtime crsarrtime ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2008 7.00 18.0 5.00 2052 1940 2222 2120 ## 2 2008 7.00 18.0 5.00 2016 1900 2102 1955 ## 3 2008 7.00 18.0 5.00 2139 2035 39.0 2355 ## 4 2008 7.00 18.0 5.00 2039 1930 2157 2100 ## 5 2008 7.00 18.0 5.00 2112 2010 2205 2105 ## 6 2008 7.00 18.0 5.00 2217 2010 2310 2110 ## 7 2008 7.00 18.0 5.00 32.0 2135 112 2225 ## 8 2008 7.00 18.0 5.00 2006 1840 2209 2100 ## 9 2008 7.00 18.0 5.00 1803 1655 2045 1950 ## 10 2008 7.00 18.0 5.00 1911 1750 2145 2035 ## # ... with more rows, and 22 more variables: uniquecarrier &lt;chr&gt;, ## # flightnum &lt;dbl&gt;, tailnum &lt;chr&gt;, actualelapsedtime &lt;dbl&gt;, ## # crselapsedtime &lt;dbl&gt;, airtime &lt;dbl&gt;, arrdelay &lt;dbl&gt;, depdelay &lt;dbl&gt;, ## # origin &lt;chr&gt;, dest &lt;chr&gt;, distance &lt;dbl&gt;, taxiin &lt;dbl&gt;, taxiout &lt;dbl&gt;, ## # cancelled &lt;dbl&gt;, cancellationcode &lt;chr&gt;, diverted &lt;dbl&gt;, ## # carrierdelay &lt;dbl&gt;, weatherdelay &lt;dbl&gt;, nasdelay &lt;dbl&gt;, ## # securitydelay &lt;dbl&gt;, lateaircraftdelay &lt;dbl&gt;, flightid &lt;int&gt; Use collect() and View() to preview the data in the IDE. Make sure to always limit the number of returned rows. flights %&gt;% filter(depdelay &gt;= 60, month == 7, dayofmonth == 18) %&gt;% collect() %&gt;% head(100) %&gt;% View(&quot;my_preview&quot;) 3.5 Case statements See how to use the flexibility of case statements for special cases Use case_when() to bucket each month one of four seasons flights %&gt;% mutate( season = case_when( month &gt;= 3 &amp;&amp; month &lt;= 5 ~ &quot;Spring&quot;, month &gt;= 6 &amp;&amp; month &lt;= 8 ~ &quot;Summmer&quot;, month &gt;= 9 &amp;&amp; month &lt;= 11 ~ &quot;Fall&quot;, TRUE ~ &quot;Winter&quot; ) ) %&gt;% group_by(season) %&gt;% tally() ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## season n ## &lt;chr&gt; &lt;S3: integer64&gt; ## 1 Fall 1620385 ## 2 Spring 1820509 ## 3 Winter 1719959 ## 4 Summmer 1848875 Add a specific case for “Winter” flights %&gt;% mutate( season = case_when( month &gt;= 3 &amp;&amp; month &lt;= 5 ~ &quot;Spring&quot;, month &gt;= 6 &amp;&amp; month &lt;= 8 ~ &quot;Summmer&quot;, month &gt;= 9 &amp;&amp; month &lt;= 11 ~ &quot;Fall&quot;, month == 12 | month &lt;= 2 ~ &quot;Winter&quot; ) ) %&gt;% group_by(season) %&gt;% tally() ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## season n ## &lt;chr&gt; &lt;S3: integer64&gt; ## 1 Fall 1620385 ## 2 Spring 1820509 ## 3 Winter 1719959 ## 4 Summmer 1848875 Append an entry for Monday at the end of the case statement flights %&gt;% mutate( season = case_when( month &gt;= 3 &amp;&amp; month &lt;= 5 ~ &quot;Spring&quot;, month &gt;= 6 &amp;&amp; month &lt;= 8 ~ &quot;Summmer&quot;, month &gt;= 9 &amp;&amp; month &lt;= 11 ~ &quot;Fall&quot;, month == 12 | month &lt;= 2 ~ &quot;Winter&quot;, dayofweek == 1 ~ &quot;Monday&quot; ) ) %&gt;% group_by(season) %&gt;% tally() ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## season n ## &lt;chr&gt; &lt;S3: integer64&gt; ## 1 Fall 1620385 ## 2 Spring 1820509 ## 3 Winter 1719959 ## 4 Summmer 1848875 Move the “Monday” entry to the top of the case statement flights %&gt;% mutate( season = case_when( dayofweek == 1 ~ &quot;Monday&quot;, month &gt;= 3 &amp;&amp; month &lt;= 5 ~ &quot;Spring&quot;, month &gt;= 6 &amp;&amp; month &lt;= 8 ~ &quot;Summmer&quot;, month &gt;= 9 &amp;&amp; month &lt;= 11 ~ &quot;Fall&quot;, month == 12 | month &lt;= 2 ~ &quot;Winter&quot; ) ) %&gt;% group_by(season) %&gt;% tally() ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## season n ## &lt;chr&gt; &lt;S3: integer64&gt; ## 1 Fall 1376740 ## 2 Spring 1554210 ## 3 Winter 1464948 ## 4 Monday 1036201 ## 5 Summmer 1577629 3.6 Data enrichment Upload a small dataset in order to combine it with the datawarehouse data Load the planes data into memory planes &lt;- nycflights13::planes Using DBI, copy the planes data to the datawarehouse as a temporary table dbWriteTable(con, &quot;planes&quot;, planes, temporary = TRUE) Using dplyr, create a variable pointer to the new table tbl_planes &lt;- tbl(con, &quot;planes&quot;) tbl_planes ## # Source: table&lt;planes&gt; [?? x 9] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## tailnum year type manufacturer model engines seats speed engine ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; ## 1 N10156 2004 Fixed wi… EMBRAER EMB-1… 2 55 NA Turbo… ## 2 N102UW 1998 Fixed wi… AIRBUS INDUS… A320-… 2 182 NA Turbo… ## 3 N103US 1999 Fixed wi… AIRBUS INDUS… A320-… 2 182 NA Turbo… ## 4 N104UW 1999 Fixed wi… AIRBUS INDUS… A320-… 2 182 NA Turbo… ## 5 N10575 2002 Fixed wi… EMBRAER EMB-1… 2 55 NA Turbo… ## 6 N105UW 1999 Fixed wi… AIRBUS INDUS… A320-… 2 182 NA Turbo… ## 7 N107US 1999 Fixed wi… AIRBUS INDUS… A320-… 2 182 NA Turbo… ## 8 N108UW 1999 Fixed wi… AIRBUS INDUS… A320-… 2 182 NA Turbo… ## 9 N109UW 1999 Fixed wi… AIRBUS INDUS… A320-… 2 182 NA Turbo… ## 10 N110UW 1999 Fixed wi… AIRBUS INDUS… A320-… 2 182 NA Turbo… ## # ... with more rows Create a “lazy” variable that joins the flights table to the new temp table combined &lt;- flights %&gt;% left_join(tbl_planes, by = &quot;tailnum&quot;) View a sample of flights of planes with more than 100 seats combined %&gt;% filter(seats &gt; 100) %&gt;% head() ## # Source: lazy query [?? x 38] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## year.x month dayofmonth dayofweek deptime crsdeptime arrtime crsarrtime ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2008 7.00 18.0 5.00 1801 1755 1939 1935 ## 2 2008 7.00 18.0 5.00 958 950 1127 1130 ## 3 2008 7.00 18.0 5.00 627 620 802 800 ## 4 2008 7.00 18.0 5.00 2052 1940 2222 2120 ## 5 2008 7.00 18.0 5.00 1203 1205 1256 1300 ## 6 2008 7.00 18.0 5.00 1422 1420 1513 1515 ## # ... with 30 more variables: uniquecarrier &lt;chr&gt;, flightnum &lt;dbl&gt;, ## # tailnum &lt;chr&gt;, actualelapsedtime &lt;dbl&gt;, crselapsedtime &lt;dbl&gt;, ## # airtime &lt;dbl&gt;, arrdelay &lt;dbl&gt;, depdelay &lt;dbl&gt;, origin &lt;chr&gt;, ## # dest &lt;chr&gt;, distance &lt;dbl&gt;, taxiin &lt;dbl&gt;, taxiout &lt;dbl&gt;, ## # cancelled &lt;dbl&gt;, cancellationcode &lt;chr&gt;, diverted &lt;dbl&gt;, ## # carrierdelay &lt;dbl&gt;, weatherdelay &lt;dbl&gt;, nasdelay &lt;dbl&gt;, ## # securitydelay &lt;dbl&gt;, lateaircraftdelay &lt;dbl&gt;, flightid &lt;int&gt;, ## # year.y &lt;int&gt;, type &lt;chr&gt;, manufacturer &lt;chr&gt;, model &lt;chr&gt;, ## # engines &lt;int&gt;, seats &lt;int&gt;, speed &lt;int&gt;, engine &lt;chr&gt; See how many flights each plane McDonnel Douglas had combined %&gt;% filter(manufacturer == &quot;MCDONNELL DOUGLAS&quot;) %&gt;% group_by(tailnum) %&gt;% tally() ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## tailnum n ## &lt;chr&gt; &lt;S3: integer64&gt; ## 1 N599AA 1243 ## 2 N494AA 1360 ## 3 N492AA 1331 ## 4 N505AA 1373 ## 5 N777NC 1850 ## 6 N475AA 1358 ## 7 N583AA 1403 ## 8 N560AA 1340 ## 9 N480AA 1204 ## 10 N470AA 1455 ## # ... with more rows Get the total number of planes, and the average, minimum &amp; maximum number of flights for the manufacturer combined %&gt;% filter(manufacturer == &quot;MCDONNELL DOUGLAS&quot;) %&gt;% group_by(tailnum) %&gt;% tally() %&gt;% summarise(planes = n(), avg_flights = mean(n, na.rm = TRUE), max_flights = max(n, na.rm = TRUE), min_flights = min(n, na.rm = TRUE)) ## # Source: lazy query [?? x 4] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## planes avg_flights max_flights min_flights ## &lt;S3: integer64&gt; &lt;dbl&gt; &lt;S3: integer64&gt; &lt;S3: integer64&gt; ## 1 102 1346 1850 1068 "],
["data-visualizations.html", "4 Data Visualizations 4.1 Simple plot 4.2 Plot in one code segment 4.3 Plot specific data segments 4.4 Two or more queries 4.5 Visualize using dbplot 4.6 Plot a different aggregation 4.7 Create a histogram 4.8 Raster plot 4.9 Using the calculate functions 4.10 Under the hood (II)", " 4 Data Visualizations 4.1 Simple plot Practice pushing the calculations to the database Use collect() bring back the aggregated results into a “pass-through” variable called by_month by_month &lt;- flights %&gt;% group_by(month) %&gt;% tally() %&gt;% mutate(n = as.numeric(n)) %&gt;% collect() head(by_month) ## # A tibble: 6 x 2 ## month n ## &lt;dbl&gt; &lt;dbl&gt; ## 1 10.0 556205 ## 2 4.00 598126 ## 3 12.0 544958 ## 4 5.00 606293 ## 5 2.00 569236 ## 6 7.00 627931 Plot results using ggplot2 library(ggplot2) ggplot(by_month) + geom_line(aes(x = month, y = n)) 4.2 Plot in one code segment Practice going from dplyr to ggplot2 without using pass-through variable, great for EDA Using the code from the previous section, create a single piped code set which also creates the plot flights %&gt;% group_by(month) %&gt;% tally() %&gt;% mutate(n = as.numeric(n)) %&gt;% collect() %&gt;% ggplot() + # &lt; Don&#39;t forget to switch to `+` geom_line(aes(x = month, y = n)) Change the aggregation to the average of arrdelay. Tip: Use x as the summarize variable flights %&gt;% group_by(month) %&gt;% summarise(x = mean(arrdelay, na.rm = TRUE)) %&gt;% mutate(x = as.numeric(x)) %&gt;% collect() %&gt;% ggplot() + geom_line(aes(x = month, y = x)) Plot the average distance flights %&gt;% group_by(month) %&gt;% summarise(x = mean(distance, na.rm = TRUE)) %&gt;% mutate(x = as.numeric(x)) %&gt;% collect() %&gt;% ggplot() + geom_line(aes(x = month, y = x)) 4.3 Plot specific data segments Combine skills from previous units to create more sophisticated plots Start with getting the top 5 carriers flights %&gt;% group_by(uniquecarrier) %&gt;% tally() %&gt;% arrange(desc(n)) %&gt;% head(5) ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## # Ordered by: desc(n) ## uniquecarrier n ## &lt;chr&gt; &lt;S3: integer64&gt; ## 1 WN 1201754 ## 2 AA 604885 ## 3 OO 567159 ## 4 MQ 490693 ## 5 US 453589 Pipe the top 5 carriers to a plot flights %&gt;% group_by(uniquecarrier) %&gt;% tally() %&gt;% mutate(n = as.numeric(n)) %&gt;% arrange(desc(n)) %&gt;% head(5) %&gt;% collect() %&gt;% ggplot() + geom_col(aes(x = uniquecarrier, y = n)) Improve the plot’s look flights %&gt;% group_by(uniquecarrier) %&gt;% tally() %&gt;% mutate(n = as.numeric(n)) %&gt;% arrange(desc(n)) %&gt;% head(5) %&gt;% collect() %&gt;% ggplot() + #Don&#39;t forget to switch to `+` geom_col(aes(x = uniquecarrier, y = n, fill = n)) + #Add fill theme(legend.position=&quot;none&quot;) + # Turn legend off coord_flip() + # Rotate cols into rows labs(title = &quot;Top 5 Carriers&quot;, subtitle = &quot;Source: Datawarehouse&quot;, x = &quot;Carrier Name&quot;, y = &quot;# of Flights&quot;) 4.4 Two or more queries Learn how to use pull() to pass a set of values to be used on a secondary query Use pull() to get the top 5 carriers loaded in a vector top5 &lt;- flights %&gt;% group_by(uniquecarrier) %&gt;% tally() %&gt;% arrange(desc(n)) %&gt;% head(5) %&gt;% pull(uniquecarrier) top5 ## [1] &quot;WN&quot; &quot;AA&quot; &quot;OO&quot; &quot;MQ&quot; &quot;US&quot; Use %in% to pass the top5 vector to a filter flights %&gt;% filter(uniquecarrier %in% top5) ## # Source: lazy query [?? x 30] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## year month dayofmonth dayofweek deptime crsdeptime arrtime crsarrtime ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2008 7.00 18.0 5.00 1959 1835 2200 2050 ## 2 2008 7.00 18.0 5.00 2115 2115 2241 2245 ## 3 2008 7.00 18.0 5.00 1639 1620 1804 1755 ## 4 2008 7.00 18.0 5.00 634 635 751 810 ## 5 2008 7.00 18.0 5.00 1326 1315 1457 1445 ## 6 2008 7.00 18.0 5.00 1049 1050 1325 1335 ## 7 2008 7.00 18.0 5.00 1419 1420 1658 1710 ## 8 2008 7.00 18.0 5.00 2107 2100 2339 2340 ## 9 2008 7.00 18.0 5.00 640 640 918 925 ## 10 2008 7.00 18.0 5.00 1856 1845 2135 2130 ## # ... with more rows, and 22 more variables: uniquecarrier &lt;chr&gt;, ## # flightnum &lt;dbl&gt;, tailnum &lt;chr&gt;, actualelapsedtime &lt;dbl&gt;, ## # crselapsedtime &lt;dbl&gt;, airtime &lt;dbl&gt;, arrdelay &lt;dbl&gt;, depdelay &lt;dbl&gt;, ## # origin &lt;chr&gt;, dest &lt;chr&gt;, distance &lt;dbl&gt;, taxiin &lt;dbl&gt;, taxiout &lt;dbl&gt;, ## # cancelled &lt;dbl&gt;, cancellationcode &lt;chr&gt;, diverted &lt;dbl&gt;, ## # carrierdelay &lt;dbl&gt;, weatherdelay &lt;dbl&gt;, nasdelay &lt;dbl&gt;, ## # securitydelay &lt;dbl&gt;, lateaircraftdelay &lt;dbl&gt;, flightid &lt;int&gt; Group by carrier and get the average arrival delay flights %&gt;% filter(uniquecarrier %in% top5) %&gt;% group_by(uniquecarrier) %&gt;% summarise(n = mean(arrdelay, na.rm = TRUE)) ## # Source: lazy query [?? x 2] ## # Database: postgres [rstudio_dev@localhost:/postgres] ## uniquecarrier n ## &lt;chr&gt; &lt;dbl&gt; ## 1 US 2.80 ## 2 MQ 9.50 ## 3 OO 6.44 ## 4 WN 5.12 ## 5 AA 12.2 Copy the final ggplot() code from the Plot specific segment section. Update the y labs. flights %&gt;% filter(uniquecarrier %in% top5) %&gt;% group_by(uniquecarrier) %&gt;% summarise(n = mean(arrdelay, na.rm = TRUE)) %&gt;% # From previous section ---------------------------------------------- collect() %&gt;% ggplot() + #Don&#39;t forget to switch to `+` geom_col(aes(x = uniquecarrier, y = n, fill = n)) + #Add fill theme(legend.position=&quot;none&quot;) + # Turn legend off coord_flip() + # Rotate cols into rows labs(title = &quot;Top 5 Carriers&quot;, subtitle = &quot;Source: Datawarehouse&quot;, x = &quot;Carrier Name&quot;, y = &quot;Average Delay&quot;) 4.5 Visualize using dbplot Review how to use dbplot to make it easier to plot with databases Install and load dbplot install.packages(&quot;dbplot&quot;) library(dbplot) Create a line plot using the helper function dbplot_line() flights %&gt;% dbplot_line(month) Update the plot’s labels flights %&gt;% dbplot_line(month) + labs(title = &quot;Monthly flights&quot;, x = &quot;Month&quot;, y = &quot;Number of flights&quot;) 4.6 Plot a different aggregation dbplot allows for aggregate functions, other than record count, to be used for plotting Plot the average departure delay by day of week flights %&gt;% dbplot_bar(dayofweek, mean(depdelay, na.rm = TRUE)) Change the day numbers to day name labels flights %&gt;% dbplot_bar(dayofweek, mean(depdelay, na.rm = TRUE)) + scale_x_continuous( labels = c(&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;), breaks = 1:7 ) 4.7 Create a histogram Use the package’s function to easily create a histogram Use the dbplot_histogram() to build the histogram flights %&gt;% dbplot_histogram(distance) Adjust the binwidth to 300 flights %&gt;% dbplot_histogram(distance, binwidth = 300) 4.8 Raster plot Use a dbplot_raster() to visualize deptime versus depdelay flights %&gt;% dbplot_raster(deptime, arrtime) Change the plot’s resolution to 500 flights %&gt;% dbplot_raster(deptime, arrtime, resolution = 500) 4.9 Using the calculate functions Use the db_comptue_raster() function to get the underlying results that feed the plot departure &lt;- flights %&gt;% db_compute_raster(deptime, arrtime) departure ## # A tibble: 3,362 x 3 ## deptime arrtime `n()` ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0 0 136345 ## 2 1440 1584 11899 ## 3 1440 1704 12455 ## 4 1248 2208 20.0 ## 5 744 2112 1.00 ## 6 840 1344 1578 ## 7 2112 936 34.0 ## 8 936 2208 1.00 ## 9 648 816 17227 ## 10 336 528 42.0 ## # ... with 3,352 more rows Plot the results “manually” departure %&gt;% filter(`n()` &gt; 1000) %&gt;% ggplot() + geom_raster(aes(x = deptime, y = arrtime, fill = `n()`)) 4.10 Under the hood (II) Review how dbplot pushes histogram and raster calculations to the database Use the db_bin() command to see the resulting tidy eval formula db_bin(field) ## (((max(field, na.rm = TRUE) - min(field, na.rm = TRUE))/(30)) * ## ifelse((as.integer(floor(((field) - min(field, na.rm = TRUE))/((max(field, ## na.rm = TRUE) - min(field, na.rm = TRUE))/(30))))) == ## (30), (as.integer(floor(((field) - min(field, na.rm = TRUE))/((max(field, ## na.rm = TRUE) - min(field, na.rm = TRUE))/(30))))) - ## 1, (as.integer(floor(((field) - min(field, na.rm = TRUE))/((max(field, ## na.rm = TRUE) - min(field, na.rm = TRUE))/(30))))))) + ## min(field, na.rm = TRUE) Use trasnlate_sql() and simulate_odbc_postgresql() to see an example of what the resulting SQL statement looks like translate_sql(!! db_bin(field), con = simulate_odbc_postgresql()) ## &lt;SQL&gt; (((max(`field`) OVER () - min(`field`) OVER ()) / (30.0)) * CASE WHEN ((CAST(FLOOR(((`field`) - min(`field`) OVER ()) / ((max(`field`) OVER () - min(`field`) OVER ()) / (30.0))) AS INTEGER)) = (30.0)) THEN ((CAST(FLOOR(((`field`) - min(`field`) OVER ()) / ((max(`field`) OVER () - min(`field`) OVER ()) / (30.0))) AS INTEGER)) - 1.0) WHEN NOT((CAST(FLOOR(((`field`) - min(`field`) OVER ()) / ((max(`field`) OVER () - min(`field`) OVER ()) / (30.0))) AS INTEGER)) = (30.0)) THEN ((CAST(FLOOR(((`field`) - min(`field`) OVER ()) / ((max(`field`) OVER () - min(`field`) OVER ()) / (30.0))) AS INTEGER))) END) + min(`field`) OVER () "],
["modeling.html", "5 Modeling 5.1 SQL Native sampling 5.2 Sample with ID 5.3 Sample manually 5.4 Create a model &amp; test 5.5 Score inside database 5.6 Parsed model", " 5 Modeling 5.1 SQL Native sampling Use PostgreSQL TABLESAMPLE clause Use build_sql() and remote_query() to combine a the dplyr command with a custom SQL statement sample_table&lt;- dbGetQuery(con, build_sql(remote_query(flights), &quot; TABLESAMPLE SYSTEM (0.1)&quot;)) Preview the sample data View(sample_table, 1000) Test the efficacy of the sampling with a plot dbplot_histogram(sample_table, distance) 5.2 Sample with ID Use a record’s unique ID to produce a sample Use max() to get the upper limit for flightid limit &lt;- flights %&gt;% summarise(max(flightid, na.rm = TRUE)) %&gt;% pull() Use sample to get 0.1% of IDs sampling &lt;- sample(1:limit, round(limit * 0.001)) Use %in% to match the sample IDs in the flight table new_sample &lt;- flights %&gt;% filter(flightid %in% sampling) %&gt;% collect() Verify sample with a histogram dbplot_histogram(new_sample, distance) 5.3 Sample manually Use row_number(), sample() and map_df() to create a sample data set Create a filtered dataset for with 1 month of data db_month &lt;- flights %&gt;% filter(month == 1) Get the row count rows &lt;- as.integer(pull(tally(db_month))) Use row_number() to create a new column to number each row db_month &lt;- db_month %&gt;% mutate(row = row_number()) Create a random set of 600 numbers, limited by the number of rows sampling &lt;- sample(1:rows, 600) Use %in% to filter the matched sample row IDs with the random set db_month &lt;- db_month %&gt;% filter(row %in% sampling) Verify number of rows tally(db_month) Create a function with the previous steps, but replacing the month number with an argument. Collect the data at the end sample_segment &lt;- function(x, size = 600) { db_month &lt;- flights %&gt;% filter(month == x) rows &lt;- as.integer(pull(tally(db_month))) db_month &lt;- db_month %&gt;% mutate(row = row_number()) sampling &lt;- sample(1:rows, size) db_month %&gt;% filter(row %in% sampling) %&gt;% collect() } Test the function head(sample_segment(3), 100) Use map_df() to run the function for each month new_sample &lt;- 1:12 %&gt;% map_df(~sample_segment(.x)) Verify sample with a histogram dbplot_histogram(new_sample, distance) 5.4 Create a model &amp; test Prepare a model data set model_data &lt;- new_sample %&gt;% mutate( season = case_when( month &gt;= 3 &amp; month &lt;= 5 ~ &quot;Spring&quot;, month &gt;= 6 &amp; month &lt;= 8 ~ &quot;Summmer&quot;, month &gt;= 9 &amp; month &lt;= 11 ~ &quot;Fall&quot;, month == 12 | month &lt;= 2 ~ &quot;Winter&quot; ) ) %&gt;% select(arrdelay, season, depdelay) Create a simple lm() model model_lm &lt;- lm(arrdelay ~ . , data = model_data) summary(model_lm) Create a test data set by combining the sampling and model data set routines test_sample &lt;- 1:12 %&gt;% map_df(~sample_segment(.x, 100)) %&gt;% mutate( season = case_when( month &gt;= 3 &amp; month &lt;= 5 ~ &quot;Spring&quot;, month &gt;= 6 &amp; month &lt;= 8 ~ &quot;Summmer&quot;, month &gt;= 9 &amp; month &lt;= 11 ~ &quot;Fall&quot;, month == 12 | month &lt;= 2 ~ &quot;Winter&quot; ) ) %&gt;% select(arrdelay, season, depdelay) Run a simple routine to check accuracy test_sample %&gt;% mutate(p = predict(model_lm, test_sample), over = abs(p - arrdelay) &lt; 10) %&gt;% group_by(over) %&gt;% tally() %&gt;% mutate(percent = round(n / sum(n), 2)) 5.5 Score inside database Learn about tidypredict to run predictions inside the database Load the library, and see the results of passing the model as an argument to tidypredict_fit() library(tidypredict) tidypredict_fit(model_lm) Use tidypredict_sql() to see the resulting SQL statement tidypredict_sql(model_lm, con) Run the prediction inside dplyr flights %&gt;% filter(month == 2, dayofmonth == 1) %&gt;% mutate( season = case_when( month &gt;= 3 &amp; month &lt;= 5 ~ &quot;Spring&quot;, month &gt;= 6 &amp; month &lt;= 8 ~ &quot;Summmer&quot;, month &gt;= 9 &amp; month &lt;= 11 ~ &quot;Fall&quot;, month == 12 | month &lt;= 2 ~ &quot;Winter&quot; ) ) %&gt;% select( season, depdelay) %&gt;% tidypredict_to_column(model_lm) %&gt;% head() View the SQL behind the dplyr command flights %&gt;% filter(month == 2, dayofmonth == 1) %&gt;% mutate( season = case_when( month &gt;= 3 &amp; month &lt;= 5 ~ &quot;Spring&quot;, month &gt;= 6 &amp; month &lt;= 8 ~ &quot;Summmer&quot;, month &gt;= 9 &amp; month &lt;= 11 ~ &quot;Fall&quot;, month == 12 | month &lt;= 2 ~ &quot;Winter&quot; ) ) %&gt;% select( season, depdelay) %&gt;% tidypredict_to_column(model_lm) %&gt;% remote_query() Compare predictions to ensure results are within range test &lt;- tidypredict_test(model_lm) test View the records that exceeded the threshold test$raw_results %&gt;% filter(fit_threshold) 5.6 Parsed model Quick review of the model parser Use the parse_model() function to see how tidypredict interprets the model pm &lt;- parse_model(model_lm) pm Verify that the resulting table can be used to get the fit formula tidypredict_fit(pm) Save the parsed model for later use library(readr) write_csv(pm, &quot;parsedmodel.csv&quot;) "],
["intro-to-sparklyr.html", "6 Intro to sparklyr 6.1 New Spark session 6.2 Data transfer 6.3 Simple dplyr example 6.4 Map data 6.5 Caching data 6.6 sdf Functions 6.7 Feature transformers 6.8 Fit a model with sparklyr 6.9 Run predictions in Spark", " 6 Intro to sparklyr 6.1 New Spark session Learn to open a new Spark session Use spark_connect() to create a new local Spark session sc &lt;- spark_connect(master = &quot;local&quot;, version = &quot;2.0.0&quot;) Click on the SparkUI button to view the current Spark session’s UI Click on the Log button to see the message history 6.2 Data transfer Practice uploading data to Spark Copy the mtcars dataset into the session spark_mtcars &lt;- sdf_copy_to(sc, mtcars, &quot;my_mtcars&quot;) In the Connections pane, expande the my_mtcars table Go to the Spark UI, note the new jobs In the UI, click the Storage button, note the new table Click on the In-memory table my_mtcars link 6.3 Simple dplyr example See how Spark handles dplyr commands Run the following code snipett spark_mtcars %&gt;% group_by(am) %&gt;% summarise(avg_wt = mean(wt, na.rm = TRUE)) Go to the Spark UI and click the SQL button Click on the top item inside the Completed Queries table At the bottom of the diagram, expand Details 6.4 Map data See the machanics of how Spark is able to use files as a data source Examine the contents of the /usr/share/flights/data folder Read the top 5 rows of the flight_2008_1 CSV file. It is located under /usr/share/flights library(readr) top_rows &lt;- read.csv(&quot;/usr/share/flights/data/flight_2008_1.csv&quot;, nrows = 5) Create a list based on the column names, and add a list item with “character” as its value. library(purrr) file_columns &lt;- top_rows %&gt;% rename_all(tolower) %&gt;% map(function(x) &quot;character&quot;) head(file_columns) Use spark_read() to “map” the file’s structure and location to the Spark context spark_flights &lt;- spark_read_csv( sc, name = &quot;flights&quot;, path = &quot;/usr/share/flights/data/&quot;, memory = FALSE, columns = file_columns, infer_schema = FALSE ) In the Connections pane, click on the table icon by the flights variable Verify that the new variable pointer work using tally() spark_flights %&gt;% tally() 6.5 Caching data Learn how to cache a subset of the data in Spark Create a subset of the flights table object cached_flights &lt;- spark_flights %&gt;% mutate( arrdelay = ifelse(arrdelay == &quot;NA&quot;, 0, arrdelay), depdelay = ifelse(depdelay == &quot;NA&quot;, 0, depdelay) ) %&gt;% select( month, dayofmonth, arrtime, arrdelay, depdelay, crsarrtime, crsdeptime, distance ) %&gt;% mutate_all(as.numeric) Register the data subset as a new table called sub_flights sdf_register(cached_flights, &quot;sub_flights&quot;) Use tbl_cache() to extract the data into Spark memory tbl_cache(sc, &quot;sub_flights&quot;) Confirm new variable pointer works cached_flights %&gt;% tally() 6.6 sdf Functions Overview of a few sdf_ functions: http://spark.rstudio.com/reference/#section-spark-dataframes Use sdf_pivot to create a column for each value in month cached_flights %&gt;% arrange(month) %&gt;% sdf_pivot(month ~ dayofmonth) Use sdf_partition() to sepparate the data into discrete groups partition &lt;- cached_flights %&gt;% sdf_partition(training = 0.01, testing = 0.09, other = 0.9) tally(partition$training) Use sdf_bind_cols() to combine two tables of the same row size sdf_bind_cols( spark_mtcars, spark_mtcars ) Use sdf_bind_rows() to append Spark tables of the same width sdf_bind_rows( mutate(spark_mtcars, table = 1), mutate(spark_mtcars, table = 2) ) 6.7 Feature transformers See how to use Spark’s feature transformers: http://spark.rstudio.com/reference/#section-spark-feature-transformers Use ft_binarizer() to identify “delayed” flights cached_flights %&gt;% ft_binarizer( input.col = &quot;depdelay&quot;, output.col = &quot;delayed&quot;, threshold = 15 ) %&gt;% select( depdelay, delayed ) %&gt;% head(100) Use ft_bucketizer() to split the data into groups cached_flights %&gt;% ft_bucketizer( input.col = &quot;crsdeptime&quot;, output.col = &quot;dephour&quot;, splits = c(0, 400, 800, 1200, 1600, 2000, 2400) ) %&gt;% select( crsdeptime, dephour ) %&gt;% head(100) 6.8 Fit a model with sparklyr Build on the recently learned transformation techniques to feed data into a model Combine the ft_ and sdf_ functions to prepare the da sample_data &lt;- cached_flights %&gt;% filter(!is.na(arrdelay)) %&gt;% ft_binarizer( input.col = &quot;arrdelay&quot;, output.col = &quot;delayed&quot;, threshold = 15 ) %&gt;% ft_bucketizer( input.col = &quot;crsdeptime&quot;, output.col = &quot;dephour&quot;, splits = c(0, 400, 800, 1200, 1600, 2000, 2400) ) %&gt;% mutate(dephour = paste0(&quot;h&quot;, as.integer(dephour))) %&gt;% sdf_partition(training = 0.01, testing = 0.09, other = 0.9) Cache the training data training &lt;- sdf_register(sample_data$training, &quot;training&quot;) tbl_cache(sc, &quot;training&quot;) Run a logistic regression model in Spark delayed_model &lt;- training %&gt;% ml_logistic_regression(delayed ~ depdelay + dephour) View the model results summary(delayed_model) 6.9 Run predictions in Spark Quick review of running predictions and reviewing accuracy Use sdf_predict() agains the test dataset delayed_testing &lt;- sdf_predict(delayed_model, sample_data$testing) delayed_testing %&gt;% head() Use group_by() to see how effective the new model is delayed_testing %&gt;% group_by(delayed, prediction) %&gt;% tally() "],
["spark-pipelines.html", "7 Spark pipelines 7.1 Recreate the transformations 7.2 Fit, evaluate, save 7.3 Reload model 7.4 Reload pipeline", " 7 Spark pipelines 7.1 Recreate the transformations Overview of how most of the existing code will be reused Register a new table called current containing a sample of the base flights table model_data &lt;- sdf_partition( tbl(sc, &quot;flights&quot;), training = 0.01, testing = 0.01, rest = 0.98) Recreate the dplyr code in the cached_flights variable from the previous unit pipeline_df &lt;- model_data$training %&gt;% mutate( arrdelay = ifelse(arrdelay == &quot;NA&quot;, 0, arrdelay), depdelay = ifelse(depdelay == &quot;NA&quot;, 0, depdelay) ) %&gt;% select( month, dayofmonth, arrtime, arrdelay, depdelay, crsarrtime, crsdeptime, distance ) %&gt;% mutate_all(as.numeric) Create a new Spark pipeline flights_pipeline &lt;- ml_pipeline(sc) %&gt;% ft_dplyr_transformer( tbl = pipeline_df ) %&gt;% ft_binarizer( input_col = &quot;arrdelay&quot;, output_col = &quot;delayed&quot;, threshold = 15 ) %&gt;% ft_bucketizer( input_col = &quot;crsdeptime&quot;, output_col = &quot;dephour&quot;, splits = c(0, 400, 800, 1200, 1600, 2000, 2400) ) %&gt;% ft_r_formula(delayed ~ arrdelay + dephour) %&gt;% ml_logistic_regression() flights_pipeline 7.2 Fit, evaluate, save Fit (train) the pipeline’s model model &lt;- ml_fit(flights_pipeline, model_data$training) model Use the newly fitted model to perform predictions using ml_transform() predictions &lt;- ml_transform( x = model, dataset = model_data$testing) Use group_by() to see how the model performed predictions %&gt;% group_by(delayed, prediction) %&gt;% tally() Save the model into disk using ml_save() ml_save(model, &quot;saved_model&quot;, overwrite = TRUE) list.files(&quot;saved_model&quot;) ml_save(flights_pipeline, &quot;saved_pipeline&quot;, overwrite = TRUE) list.files(&quot;saved_pipeline&quot;) 7.3 Reload model Use the saved model inside a different Spark session Open a new Spark connection and reload the data library(sparklyr) sc &lt;- spark_connect(master = &quot;local&quot;, version = &quot;2.0.0&quot;) spark_flights &lt;- spark_read_csv( sc, name = &quot;flights&quot;, path = &quot;/usr/share/flights/flights_2008.csv&quot;, memory = FALSE, columns = file_columns, infer_schema = FALSE ) Use ml_load() to reload the model directly into the Spark session reload &lt;- ml_load(sc, &quot;saved_model&quot;) reload Create a new table called current. It needs to pull today’s flights library(lubridate) current &lt;- tbl(sc, &quot;flights&quot;) %&gt;% filter( month == !! month(now()), dayofmonth == !! day(now()) ) show_query(current) Create a new table called current. It needs to pull today’s flights head(current) Run predictions against the new data set new_predictions &lt;- ml_transform( x = reload, dataset = current ) Get a quick count of expected delayed flights new_predictions %&gt;% summarise(late_fligths = sum(prediction, na.rm = TRUE)) 7.4 Reload pipeline Overview of how to use new data to re-fit the pipeline, thus creating a new pipeline model Use ml_load() to reload the pipeline into the Spark session pipeline &lt;- ml_load(sc, &quot;saved_pipeline&quot;) pipeline Create a new sample data set using sample_frac() sample &lt;- tbl(sc, &quot;flights&quot;) %&gt;% sample_frac(0.001) Re-fit the model using ml_fit() and the new sample data new_model &lt;- ml_fit(pipeline, sample) new_model Save the newly fitted model ml_save(new_model, &quot;new_model&quot;) list.files(&quot;new_model&quot;) Disconnect from Spark spark_disconnect(sc) "],
["distributed-r.html", "8 Distributed R 8.1 Basic distribution 8.2 Use group_by 8.3 Distributing packages", " 8 Distributed R 8.1 Basic distribution Use spark_apply() to to view the partition row size Cache a sample of fligths flights_sample &lt;- spark_flights %&gt;% sample_frac(0.01) %&gt;% mutate(arrdelay = as.numeric(arrdelay)) %&gt;% ft_binarizer( input.col = &quot;arrdelay&quot;, output.col = &quot;delayed&quot;, threshold = 15 ) %&gt;% compute(&quot;flights_sample&quot;) Navigate to the Storage page in the Spark UI Pass nrow to spark_apply() to get the row count by partition spark_apply(flights_sample, nrow) Pass a function to operate the average distance in each partition spark_apply( flights_sample, function(x) mean(as.numeric(x$distance)) ) 8.2 Use group_by Pass a grouping field to be used instead of partitions Use the group_by argument to partition by the month field spark_apply(flights_sample, nrow, group_by = &quot;month&quot;, columns = &quot;count&quot;) Pass the same function from the previous exercise to calculate the average distance by month spark_apply( flights_sample, function(x) mean(as.numeric(x$distance)), group_by = &quot;month&quot;, columns = &quot;avg_distance&quot; ) 8.3 Distributing packages Use non-base-R packages to run the code in Spark Use broom::tidy() to run one glm() model per month models &lt;- spark_apply( flights_sample, function(e) broom::tidy(glm(delayed ~ arrdelay, data = e, family = &quot;binomial&quot;)), names = c(&quot;term&quot;, &quot;estimate&quot;, &quot;std_error&quot;, &quot;statistic&quot;, &quot;p_value&quot;), group_by = &quot;month&quot; ) models "],
["intro-to-dashboards.html", "9 Intro to dashboards 9.1 Basic structure 9.2 Dropdown data 9.3 Update dashboard items 9.4 Integrate the dropdown", " 9 Intro to dashboards 9.1 Basic structure Preview a simple shinydashboard Create and preview a simple shinydashboard ui &lt;- dashboardPage( dashboardHeader(title = &quot;Quick Example&quot;), dashboardSidebar(selectInput(&quot;select&quot;, &quot;Selection&quot;, c(&quot;one&quot;, &quot;two&quot;))), dashboardBody( valueBoxOutput(&quot;total&quot;), dataTableOutput(&quot;monthly&quot;) ) ) server &lt;- function(input, output, session) { output$total &lt;- renderValueBox(valueBox(100, subtitle = &quot;Flights&quot;)) output$monthly &lt;- renderDataTable(datatable(mtcars)) } shinyApp(ui, server) 9.2 Dropdown data Review a technique to populate a dropdown Use purrr to create a list with the correct structure for the shiny drop down airline_list &lt;- carriers %&gt;% select(carrier, carriername) %&gt;% # In case more fields are added collect() %&gt;% # All would be collected anyway split(.$carriername) %&gt;% # Create a list item for each name map(~.$carrier) # Add the carrier code to each item head(airline_list) In the app code, replace c(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;) with airline_list # Goes from this: dashboardSidebar(selectInput(&quot;select&quot;, &quot;Selection&quot;, c(&quot;one&quot;, &quot;two&quot;))), # To this: dashboardSidebar(selectInput(&quot;select&quot;, &quot;Selection&quot;, airline_list)), Re-run the app 9.3 Update dashboard items Create base query for the dashboard using dplyr and pass the results to the dashboard Save the base “query” to a variable. It will contain a carrier selection. To transition into shiny programming easier, the variable will be a function. base_dashboard &lt;- function(){ flights %&gt;% filter(uniquecarrier == &quot;DL&quot;) } head(base_dashboard()) Use the base query to figure the number of flights for that carrier base_dashboard() %&gt;% tally() %&gt;% pull() In the app, remove the 100 number and pipe the dplyr code into the valueBox() function # Goes from this: output$total &lt;- renderValueBox(valueBox(100, subtitle = &quot;Flights&quot;)) # To this: output$total &lt;- renderValueBox( base_dashboard() %&gt;% tally() %&gt;% pull() %&gt;% valueBox(subtitle = &quot;Flights&quot;)) Create a table with the month name and the number of flights for that month base_dashboard() %&gt;% group_by(month) %&gt;% tally() %&gt;% collect() %&gt;% mutate(n = as.numeric(n)) %&gt;% rename(flights = n) %&gt;% arrange(month) In the app, replace head(mtcars) with the piped code, and re-run the app # Goes from this: output$monthly &lt;- renderTable(head(mtcars)) # To this: output$monthly &lt;- renderDataTable(datatable( base_dashboard() %&gt;% group_by(month) %&gt;% tally() %&gt;% collect() %&gt;% mutate(n = as.numeric(n)) %&gt;% rename(flights = n) %&gt;% arrange(month))) 9.4 Integrate the dropdown Use shiny’s reactive() function to integrate the user input in one spot In the original base_dashboard() code, replace function with reactive, and &quot;DL&quot; with input$select # Goes from this base_dashboard &lt;- function(){ flights %&gt;% filter(uniquecarrier == &quot;DL&quot;)} # To this base_dashboard &lt;- reactive({ flights %&gt;% filter(uniquecarrier == input$select)}) Insert the new code right after the server &lt;- function(input, output, session) line. The full code should now look like this: ui &lt;- dashboardPage( dashboardHeader(title = &quot;Quick Example&quot;), dashboardSidebar(selectInput(&quot;select&quot;, &quot;Selection&quot;, airline_list)), dashboardBody( valueBoxOutput(&quot;total&quot;), dataTableOutput(&quot;monthly&quot;) ) ) server &lt;- function(input, output, session) { base_dashboard &lt;- reactive({ flights %&gt;% filter(uniquecarrier == input$select) }) output$total &lt;- renderValueBox( base_dashboard() %&gt;% tally() %&gt;% pull() %&gt;% valueBox(subtitle = &quot;Flights&quot;) ) output$monthly &lt;- renderDataTable(datatable( base_dashboard() %&gt;% group_by(month) %&gt;% tally() %&gt;% collect() %&gt;% mutate(n = as.numeric(n)) %&gt;% rename(flights = n) %&gt;% arrange(month) )) } shinyApp(ui, server) Re-run the app "],
["dashboard-drill-down.html", "10 Dashboard drill-down 10.1 Add a tabset to the dashboard 10.2 Add interactivity 10.3 Add title to the new tab 10.4 pool pakcage", " 10 Dashboard drill-down 10.1 Add a tabset to the dashboard Prepare the ui to accept new tabs based on the user’s input Wrap the “output” functions in the ui with a tabPanel() # Goes from this valueBoxOutput(&quot;total&quot;), dataTableOutput(&quot;monthly&quot;) # To this tabPanel( valueBoxOutput(&quot;total&quot;), dataTableOutput(&quot;monthly&quot;) ) Set the panel’s title and value. The new code should look like this tabPanel( title = &quot;Dashboard&quot;, value = &quot;page1&quot;, valueBoxOutput(&quot;total&quot;), dataTableOutput(&quot;monthly&quot;) ) Wrap that code inside a tabsetPanel(), set the id to tabs tabsetPanel( id = &quot;tabs&quot;, tabPanel( title = &quot;Dashboard&quot;, value = &quot;page1&quot;, valueBoxOutput(&quot;total&quot;), dataTableOutput(&quot;monthly&quot;) ) ) Re-run the app 10.2 Add interactivity Add an click-event that creates a new tab Set the selection and rownames in the current datatable() function output$monthly &lt;- renderDataTable(datatable({ base_dashboard() %&gt;% group_by(month) %&gt;% tally() %&gt;% collect() %&gt;% mutate(n = as.numeric(n)) %&gt;% rename(flights = n) %&gt;% arrange(month)}, list( target = &quot;cell&quot;), # New code rownames = FALSE)) # New code Use observeEvent() and appendTab() to add the interactivity observeEvent(input$monthly_cell_clicked, { appendTab( inputId = &quot;tabs&quot;, # This is the tabsets panel&#39;s ID tabPanel( &quot;test_new&quot;, # This will be the label of the new tab renderDataTable(mtcars, rownames = FALSE) ) ) }) Re-run the app Click on a row inside the datatable and then select the new tab called test_new to see the mtcars data 10.3 Add title to the new tab Use the input’s info to create a custom label Load the clicked cell’s info into a variable, and create a new lable by concatenating the cell’s month and the selected airline’s code observeEvent(input$monthly_cell_clicked, { cell &lt;- input$monthly_cell_clicked # New code if (!is.null(cell$value)) { # New code tab_title &lt;- paste0(month.name[cell$value], &quot;_&quot;, input$select) appendTab( inputId = &quot;tabs&quot;, tabPanel( tab_title, # Changed code renderDataTable(mtcars, rownames = FALSE) ) ) } }) Re-run the app, and click on one of the month’s to confirm that the new label works Use updateTabsetPanel to switch the dashboard’s focus to the newly created tab. It goes after the tabPanel() code updateTabsetPanel(session, &quot;tabs&quot;, selected = tab_title) 10.4 pool pakcage Improve connectivity using the pool package 1.Change dbConnect() to dbPool() # Goes from this con &lt;- DBI::dbConnect(odbc::odbc(), &quot;Postgres Dev&quot;) # To this con &lt;- pool::dbPool(odbc::odbc(), dsn = &quot;Postgres Dev&quot;) Add an onStop() step to close the pool connection onStop(function() { poolClose(con) }) "],
["share-and-production.html", "11 Share and Production 11.1 Publish dashboard 11.2 Schedule scoring 11.3 Scheduled pipeline", " 11 Share and Production 11.1 Publish dashboard Use RStudio Connect to publish work internally in the enterprise Open the dashboard app.R file Click on File Click on Publish Connect Account click Next Select RStudio Connect Copy and paste your RStudio Server URL and add :3939 Enter your credentials Complete the form Click Proceed Click on Connect Click Publish 11.2 Schedule scoring Use the tidypredict model to score and write back to the database Create a new RMarkdown Copy the code from the excercise library(tidyverse) library(dbplyr) library(tidypredict) library(DBI) library(lubridate) dw &lt;- config::get(&quot;datawarehouse-dev&quot;) con &lt;- dbConnect(odbc::odbc(), Driver = dw$driver, Server = dw$server, UID = dw$uid, PWD = dw$pwd, Port = dw$port, Database = dw$database ) flights &lt;- tbl(con, in_schema(&quot;datawarehouse&quot;, &quot;flight&quot;)) #head(flights) parsedmodel &lt;- read_csv(&quot;parsedmodel.csv&quot;) predictions &lt;- flights %&gt;% filter( month == !! month(now()), dayofmonth == !! day(now()) ) %&gt;% mutate( season = case_when( month &gt;= 3 &amp; month &lt;= 5 ~ &quot;Spring&quot;, month &gt;= 6 &amp; month &lt;= 8 ~ &quot;Summmer&quot;, month &gt;= 9 &amp; month &lt;= 11 ~ &quot;Fall&quot;, month == 12 | month &lt;= 2 ~ &quot;Winter&quot; ) ) %&gt;% tidypredict_to_column(parsedmodel) %&gt;% select( pred_flightid = flightid, pred_fit = fit, check_score = nasdelay) update_statement &lt;- build_sql( &quot;UPDATE datawarehouse.flight SET nasdelay = pred_fit FROM (&quot;, remote_query(predictions), &quot;) as p &quot;, &quot;WHERE pred_flightid = flightid&quot;, con = con ) dbSendQuery(con, update_statement) Click on File and then Publish Select Publish just this document Click Publish anyway on the warning In RStudio Connect, select Schedule Click on Schedule output for default Click on Run every weekday (Monday to Friday) Click Save 11.3 Scheduled pipeline See how to automate the pipeline model to run on a daily basis Create a new RMarkdown document Copy the code from the Reload Pipeline exercise into the new document Add the top_rows and file_columns code from the Intro to sparklyr section Move the saved_model folder under /tmp Change the ml_load() location to &quot;/tmp/saved_model&quot; library(tidyverse) library(lubridate) library(sparklyr) top_rows &lt;- read.csv(&quot;/usr/share/flights/data/flight_2008_1.csv&quot;, nrows = 5) file_columns &lt;- top_rows %&gt;% rename_all(tolower) %&gt;% map(function(x) &quot;character&quot;) sc &lt;- spark_connect(master = &quot;local&quot;, version = &quot;2.1.0&quot;) spark_flights &lt;- spark_read_csv( sc, name = &quot;flights&quot;, path = &quot;/usr/share/flights/flights_2008.csv&quot;, memory = FALSE, columns = file_columns, infer_schema = FALSE ) reload &lt;- ml_load(sc, &quot;/tmp/saved_model&quot;) current &lt;- tbl(sc, &quot;flights&quot;) %&gt;% filter( month == !! month(now()), dayofmonth == !! day(now()) ) new_predictions &lt;- ml_transform( x = reload, dataset = current ) new_predictions %&gt;% summarise(late_fligths = sum(prediction, na.rm = TRUE)) spark_disconnect(sc) Click on File and then Publish Select Publish just this document Click Publish anyway on the warning In RStudio Connect, select Schedule Click on Schedule output for default Click on Run every weekday (Monday to Friday) Click Save "]
]
