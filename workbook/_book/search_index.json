[
["index.html", "Big Data with R - Exercise book", " Big Data with R - Exercise book Learn how to use R with Hive, SQL Server, Oracle and other scalable external data sources along with Big Data clusters in this two-day workshop. We will cover how to connect, retrieve schema information, upload data, and explore data outside of R. For databases, we will focus on the dplyr, DBI and odbc packages. These packages enable us to use the same dplyr verbs inside R but are translated and sent as SQL queries. For Big Data clusters, we will also learn how to use the sparklyr package to run models inside Spark and return the results to R. We will review recommendations for connection settings, security best practices and deployment options. Throughout the workshop, we will take advantage of the new data connections available with the RStudio IDE. "],
["access-a-database.html", "1 Access a database 1.1 Connect to a database 1.2 Explore the database using the RStudio IDE 1.3 List drivers and DSNs 1.4 Connect to a database using code 1.5 Connect to a database without a DSN 1.6 Secure credentials in a file 1.7 Use the OS credential store", " 1 Access a database 1.1 Connect to a database The simpliest way to connect to a database. More complex examples will be examined later in the class. Click on the Connections tab Click on the New Connection button Select Postgres Dev Click OK 1.2 Explore the database using the RStudio IDE Becoming familiar with the new interface for databases inside the RStudio IDE Expand the datawarehouse schema Expand the airport table Click on the table icon to the right of the airport table (Optional) Expand and explore the other tables Click on the disconnect icon to close the connection 1.3 List drivers and DSNs Learn how to use the odbc package to get DB info from your machine To get a list of drivers available in the server library(odbc) odbcListDrivers()[1:2] ## name attribute ## 1 PostgreSQL ANSI Description ## 2 PostgreSQL ANSI Driver ## 3 PostgreSQL ANSI Setup ## 4 PostgreSQL ANSI Debug ## 5 PostgreSQL ANSI CommLog ## 6 PostgreSQL ANSI UsageCount ## 7 PostgreSQL Unicode Description ## 8 PostgreSQL Unicode Driver ## 9 PostgreSQL Unicode Setup ## 10 PostgreSQL Unicode Debug ## 11 PostgreSQL Unicode CommLog ## 12 PostgreSQL Unicode UsageCount ## 13 AmazonRedshift Driver ## 14 Hive Driver ## 15 Impala Driver ## 16 Oracle Driver ## 17 PostgreSQL Driver ## 18 Salesforce Driver ## 19 SQLServer Driver ## 20 Teradata Driver To see a list of DSNs available in the server odbcListDataSources() ## name description ## 1 Postgres Dev PostgreSQL ## 2 Postgres Prod PostgreSQL 1.4 Connect to a database using code Use the odbc package along with DBI to open a connection to a database Run the following code to connect library(DBI) con &lt;- dbConnect(odbc::odbc(), &quot;Postgres Dev&quot;) Use dbListTables() to retrieve a list of tables dbListTables(con) ## [1] &quot;airport&quot; &quot;carrier&quot; &quot;flight&quot; Use dbGetQuery() to run a quick query odbc::dbGetQuery(con, &quot;SELECT * FROM datawarehouse.airport LIMIT 10&quot;) ## airport airportname ## 1 01A Afognak Lake, AK: Afognak Lake Airport ## 2 03A Granite Mountain, AK: Bear Creek Mining Strip ## 3 04A Lik, AK: Lik Mining Camp ## 4 05A Little Squaw, AK: Little Squaw Airport ## 5 06A Kizhuyak, AK: Kizhuyak Bay ## 6 07A Klawock, AK: Klawock Seaplane Base ## 7 08A Elizabeth Island, AK: Elizabeth Island Airport ## 8 09A Homer, AK: Augustin Island ## 9 1B1 Hudson, NY: Columbia County ## 10 1G4 Peach Springs, AZ: Grand Canyon West Disconnect from the database using dbDisconnect() dbDisconnect(con) 1.5 Connect to a database without a DSN A more complex way of connecting to a database, using best practices: http://db.rstudio.com/best-practices/managing-credentials/#prompt-for-credentials Use the following code to start a new connection that does not use the pre-defined DSN con &lt;- dbConnect( odbc::odbc(), Driver = &quot;PostgreSQL&quot;, Server = &quot;localhost&quot;, UID = rstudioapi::askForPassword(&quot;Database user&quot;), PWD = rstudioapi::askForPassword(&quot;Database password&quot;), Port = 5432, Database = &quot;postgres&quot; ) When prompted, type in rstudio_dev for the user, and dev_user as the password 1.6 Secure credentials in a file *Credentials can be saved in a YAML file and then read using the config package: http://db.rstudio.com/best-practices/managing-credentials/#stored-in-a-file-with-config* Open and explore the config.yml file available in your working directory Use the config package to connect to the database dw &lt;- config::get(&quot;datawarehouse-dev&quot;) con &lt;- DBI::dbConnect(odbc::odbc(), Driver = dw$driver, Server = dw$server, UID = dw$uid, PWD = dw$pwd, Port = dw$port, Database = dw$database ) 1.7 Use the OS credential store The keyring package can be used to store the database credentials at the OS level [Pending] "],
["dplyr-basics.html", "2 dplyr Basics 2.1 Create a table variable 2.2 Basic aggregation 2.3 Under the hood 2.4 Un-translated R commands", " 2 dplyr Basics 2.1 Create a table variable Basics to how to point a variable in R to a table or view inside the database Load the dplyr and dbplyr libraries library(dplyr) library(dbplyr) (Optional) Open a connection to the database if it’s currently closed con &lt;- DBI::dbConnect(odbc::odbc(), &quot;Postgres Dev&quot;) Use the tbl() and in_schema() functions to create a reference to a table tbl(con, in_schema(&quot;datawarehouse&quot;, &quot;airport&quot;)) ## # Source: table&lt;datawarehouse.airport&gt; [?? x 2] ## # Database: PostgreSQL 9.3.20[rstudio_dev@localhost/postgres] ## airport airportname ## &lt;chr&gt; &lt;chr&gt; ## 1 01A Afognak Lake, AK: Afognak Lake Airport ## 2 03A Granite Mountain, AK: Bear Creek Mining Strip ## 3 04A Lik, AK: Lik Mining Camp ## 4 05A Little Squaw, AK: Little Squaw Airport ## 5 06A Kizhuyak, AK: Kizhuyak Bay ## 6 07A Klawock, AK: Klawock Seaplane Base ## 7 08A Elizabeth Island, AK: Elizabeth Island Airport ## 8 09A Homer, AK: Augustin Island ## 9 1B1 Hudson, NY: Columbia County ## 10 1G4 Peach Springs, AZ: Grand Canyon West ## # ... with more rows Load the reference, not the table data, into a variable airports &lt;- tbl(con, in_schema(&quot;datawarehouse&quot;, &quot;airport&quot;)) Call the variable to see preview the data in the table airports ## # Source: table&lt;datawarehouse.airport&gt; [?? x 2] ## # Database: PostgreSQL 9.3.20[rstudio_dev@localhost/postgres] ## airport airportname ## &lt;chr&gt; &lt;chr&gt; ## 1 01A Afognak Lake, AK: Afognak Lake Airport ## 2 03A Granite Mountain, AK: Bear Creek Mining Strip ## 3 04A Lik, AK: Lik Mining Camp ## 4 05A Little Squaw, AK: Little Squaw Airport ## 5 06A Kizhuyak, AK: Kizhuyak Bay ## 6 07A Klawock, AK: Klawock Seaplane Base ## 7 08A Elizabeth Island, AK: Elizabeth Island Airport ## 8 09A Homer, AK: Augustin Island ## 9 1B1 Hudson, NY: Columbia County ## 10 1G4 Peach Springs, AZ: Grand Canyon West ## # ... with more rows Set up the pointers to the other of the tables flights &lt;- tbl(con, in_schema(&quot;datawarehouse&quot;, &quot;flight&quot;)) carriers &lt;- tbl(con, in_schema(&quot;datawarehouse&quot;, &quot;carrier&quot;)) 2.2 Basic aggregation A couple of dplyr commands that run in-database How many records are in the airport table? carriers %&gt;% tally() ## # Source: lazy query [?? x 1] ## # Database: PostgreSQL 9.3.20[rstudio_dev@localhost/postgres] ## n ## &lt;S3: integer64&gt; ## 1 1702 What is the average character length of the airport codes? How many characters is the longest and the shortest airport name? airports %&gt;% summarise(avg_airport_length = mean(length(airport)), max_airport_name = max(length(airportname)), min_airport_name = min(length(airportname)), total_records = n()) ## # Source: lazy query [?? x 4] ## # Database: PostgreSQL 9.3.20[rstudio_dev@localhost/postgres] ## avg_airport_length max_airport_name min_airport_name total_records ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;S3: integer64&gt; ## 1 3 81 17 6454 Additional exercises: How many records are in the carrier table? How many characters is the longest carriername? 2.3 Under the hood Use show_query() to preview the SQL statement that will be sent to the database* SQL statement that actually runs when we ran airports as a command show_query(airports) ## &lt;SQL&gt; ## SELECT * ## FROM datawarehouse.airport Easily view the resulting query by adding show_query() in another piped command carriers %&gt;% tally() %&gt;% show_query() ## &lt;SQL&gt; ## SELECT count(*) AS &quot;n&quot; ## FROM datawarehouse.carrier Run the same for last exercise in the previous section airports %&gt;% summarise(avg_airport_length = mean(length(airport)), max_airport_name = max(length(airportname)), min_airport_name = min(length(airportname)), total_records = n()) %&gt;% show_query() ## &lt;SQL&gt; ## SELECT AVG(LENGTH(&quot;airport&quot;)) AS &quot;avg_airport_length&quot;, MAX(LENGTH(&quot;airportname&quot;)) AS &quot;max_airport_name&quot;, MIN(LENGTH(&quot;airportname&quot;)) AS &quot;min_airport_name&quot;, count(*) AS &quot;total_records&quot; ## FROM datawarehouse.airport 2.4 Un-translated R commands Review of how dbplyr handles R commands that have not been translated into a like-SQL command Preview how Sys.time() is translated airports %&gt;% mutate(today = Sys.time()) %&gt;% show_query() ## &lt;SQL&gt; ## SELECT &quot;airport&quot;, &quot;airportname&quot;, SYS.TIME() AS &quot;today&quot; ## FROM datawarehouse.airport Use PostgreSQL’s native commands, in this case now() airports %&gt;% mutate(today = now()) %&gt;% show_query() ## &lt;SQL&gt; ## SELECT &quot;airport&quot;, &quot;airportname&quot;, NOW() AS &quot;today&quot; ## FROM datawarehouse.airport Run the dplyr code to confirm it works airports %&gt;% mutate(today = now()) %&gt;% select(today) %&gt;% head() ## # Source: lazy query [?? x 1] ## # Database: PostgreSQL 9.3.20[rstudio_dev@localhost/postgres] ## today ## &lt;dttm&gt; ## 1 2017-12-22 20:26:11 ## 2 2017-12-22 20:26:11 ## 3 2017-12-22 20:26:11 ## 4 2017-12-22 20:26:11 ## 5 2017-12-22 20:26:11 ## 6 2017-12-22 20:26:11 "],
["data-transformation.html", "3 Data transformation 3.1 Group and sort records", " 3 Data transformation 3.1 Group and sort records Learn how to use group_by() and arrange() to better understand aggregated data How many flights are there per month? flights %&gt;% group_by(month) %&gt;% tally() ## # Source: lazy query [?? x 2] ## # Database: PostgreSQL 9.3.20[rstudio_dev@localhost/postgres] ## month n ## &lt;dbl&gt; &lt;S3: integer64&gt; ## 1 10 556205 ## 2 4 598126 ## 3 12 544958 ## 4 5 606293 ## 5 2 569236 ## 6 7 627931 ## 7 11 523272 ## 8 9 540908 ## 9 1 605765 ## 10 3 616090 ## # ... with more rows Order the results by the month number flights %&gt;% group_by(month) %&gt;% tally() %&gt;% arrange(month) ## # Source: lazy query [?? x 2] ## # Database: PostgreSQL 9.3.20[rstudio_dev@localhost/postgres] ## # Ordered by: month ## month n ## &lt;dbl&gt; &lt;S3: integer64&gt; ## 1 1 605765 ## 2 2 569236 ## 3 3 616090 ## 4 4 598126 ## 5 5 606293 ## 6 6 608665 ## 7 7 627931 ## 8 8 612279 ## 9 9 540908 ## 10 10 556205 ## # ... with more rows Order the results by the number of flights, starting with the month with most flights by using desc() inside the arrange() command flights %&gt;% group_by(month) %&gt;% tally() %&gt;% arrange(desc(n)) ## # Source: lazy query [?? x 2] ## # Database: PostgreSQL 9.3.20[rstudio_dev@localhost/postgres] ## # Ordered by: desc(n) ## month n ## &lt;dbl&gt; &lt;S3: integer64&gt; ## 1 7 627931 ## 2 3 616090 ## 3 8 612279 ## 4 6 608665 ## 5 5 606293 ## 6 1 605765 ## 7 4 598126 ## 8 2 569236 ## 9 10 556205 ## 10 12 544958 ## # ... with more rows Which are the top 4 months with the most flight activity? flights %&gt;% group_by(month) %&gt;% tally() %&gt;% arrange(desc(n)) %&gt;% head(4) ## # Source: lazy query [?? x 2] ## # Database: PostgreSQL 9.3.20[rstudio_dev@localhost/postgres] ## # Ordered by: desc(n) ## month n ## &lt;dbl&gt; &lt;S3: integer64&gt; ## 1 7 627931 ## 2 3 616090 ## 3 8 612279 ## 4 6 608665 What were the top 5 calendar days with most flight activity? flights %&gt;% group_by(month, dayofmonth) %&gt;% tally() %&gt;% arrange(desc(n)) %&gt;% head(5) ## # Source: lazy query [?? x 3] ## # Database: PostgreSQL 9.3.20[rstudio_dev@localhost/postgres] ## # Groups: month ## # Ordered by: desc(n) ## month dayofmonth n ## &lt;dbl&gt; &lt;dbl&gt; &lt;S3: integer64&gt; ## 1 7 18 21128 ## 2 7 11 21125 ## 3 7 25 21102 ## 4 7 10 21058 ## 5 7 17 21055 Figure the percent ratio of flights per month flights %&gt;% group_by(month) %&gt;% tally() %&gt;% arrange(desc(n)) %&gt;% mutate(percent = n/sum(n)) ## # Source: lazy query [?? x 3] ## # Database: PostgreSQL 9.3.20[rstudio_dev@localhost/postgres] ## # Ordered by: desc(n) ## month n percent ## &lt;dbl&gt; &lt;S3: integer64&gt; &lt;dbl&gt; ## 1 7 627931 0.08957994 ## 2 3 616090 0.08789071 ## 3 8 612279 0.08734704 ## 4 6 608665 0.08683147 ## 5 5 606293 0.08649309 ## 6 1 605765 0.08641776 ## 7 4 598126 0.08532799 ## 8 2 569236 0.08120657 ## 9 10 556205 0.07934759 ## 10 12 544958 0.07774310 ## # ... with more rows Use View() to preview the data "],
["data-visualizations.html", "4 Data Visualizations 4.1 Simple plots 4.2 Visualize using dbplot 4.3 Plot a different aggregation 4.4 Create a histogram 4.5 Raster plot 4.6 Using the calculate functions 4.7 Under the hood (II)", " 4 Data Visualizations 4.1 Simple plots Practice pushing the calculations to the database Use collect() bring back the aggregated results by_month &lt;- flights %&gt;% group_by(month) %&gt;% tally() %&gt;% mutate(n = as.numeric(n)) %&gt;% collect() head(by_month) ## # A tibble: 6 x 2 ## month n ## &lt;dbl&gt; &lt;dbl&gt; ## 1 10 556205 ## 2 4 598126 ## 3 12 544958 ## 4 5 606293 ## 5 2 569236 ## 6 7 627931 Plot results using ggplot2 library(ggplot2) ggplot(by_month) + geom_line(aes(x = month, y = n)) 4.2 Visualize using dbplot Review how to use dbplot to make it easier to plot with databases Install and load dbplot install.packages(&quot;dbplot&quot;) library(dbplot) Create a line plot using the helper function dbplot_line() flights %&gt;% dbplot_line(month) Update the plot’s labels flights %&gt;% dbplot_line(month) + labs(title = &quot;Monthly flights&quot;, x = &quot;Month&quot;, y = &quot;Number of flights&quot;) 4.3 Plot a different aggregation dbplot allows for aggregate functions, other than record count, to be used for plotting Plot the average departure delay by day of week flights %&gt;% dbplot_bar(dayofweek, mean(depdelay)) Change the day numbers to day name labels flights %&gt;% dbplot_bar(dayofweek, mean(depdelay)) + scale_x_continuous(labels = c(&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;,&quot;Sun&quot;), breaks = 1:7) 4.4 Create a histogram Use the package’s function to easily create a histogram Use the dbplot_histogram() to build the histogram flights %&gt;% dbplot_histogram(distance) Adjust the binwidth to 300 flights %&gt;% dbplot_histogram(distance, binwidth = 300) 4.5 Raster plot Use a dbplot_raster() to visualize deptime versus depdelay flights %&gt;% dbplot_raster(deptime, arrtime) Change the plot’s resolution to 500 flights %&gt;% dbplot_raster(deptime, arrtime, resolution = 500) 4.6 Using the calculate functions Use the db_comptue_raster() function to get the underlying results that feed the plot departure &lt;- flights %&gt;% db_compute_raster(deptime, arrtime) departure ## # A tibble: 3,362 x 3 ## deptime arrtime `n()` ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0 0 136345 ## 2 0 24 126 ## 3 0 48 249 ## 4 0 96 817 ## 5 0 120 954 ## 6 0 144 394 ## 7 0 192 290 ## 8 0 216 416 ## 9 0 240 302 ## 10 0 288 112 ## # ... with 3,352 more rows Plot the results “manually” departure %&gt;% filter(`n()` &gt; 1000) %&gt;% ggplot() + geom_raster(aes(x = deptime, y = arrtime, fill = `n()`)) 4.7 Under the hood (II) Review how dbplot pushes histogram and raster calculations to the database Use the db_bin() command to see the resulting tidy eval formula db_bin(field) ## (((max(field) - min(field))/(30)) * ifelse((as.integer(floor(((field) - ## min(field))/((max(field) - min(field))/(30))))) == (30), ## (as.integer(floor(((field) - min(field))/((max(field) - min(field))/(30))))) - ## 1, (as.integer(floor(((field) - min(field))/((max(field) - ## min(field))/(30))))))) + min(field) Use trasnlate_sql() and simulate_odbc_postgresql() to see an example of what the resulting SQL statement looks like translate_sql(!! db_bin(field), con = simulate_odbc_postgresql()) ## &lt;SQL&gt; (((max(`field`) OVER () - min(`field`) OVER ()) / (30.0)) * CASE WHEN ((CAST(FLOOR(((`field`) - min(`field`) OVER ()) / ((max(`field`) OVER () - min(`field`) OVER ()) / (30.0))) AS INTEGER)) = (30.0)) THEN ((CAST(FLOOR(((`field`) - min(`field`) OVER ()) / ((max(`field`) OVER () - min(`field`) OVER ()) / (30.0))) AS INTEGER)) - 1.0) ELSE ((CAST(FLOOR(((`field`) - min(`field`) OVER ()) / ((max(`field`) OVER () - min(`field`) OVER ()) / (30.0))) AS INTEGER))) END) + min(`field`) OVER () "],
["solutions.html", "Solutions", " Solutions Unit 2 How many records are in the carrier table? carriers %&gt;% tally() ## # Source: lazy query [?? x 1] ## # Database: PostgreSQL 9.3.20[rstudio_dev@localhost/postgres] ## n ## &lt;S3: integer64&gt; ## 1 1702 How many characters is the longest carriername? carriers %&gt;% summarise(max(length(carriername))) ## # Source: lazy query [?? x 1] ## # Database: PostgreSQL 9.3.20[rstudio_dev@localhost/postgres] ## `max(length(carriername))` ## &lt;int&gt; ## 1 90 "]
]
